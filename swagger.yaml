openapi: 3.0.0
servers:
  - url: https://api.{environment}
    variables:
      environment:
        default: allegro.pl
        enum:
          - allegro.pl         # Production server
          - allegro.pl.allegrosandbox.pl     # Sandbox server
info:
  description: 'https://developer.allegro.pl/about'
  version: 'latest'
  title: Allegro REST API
  termsOfService: 'https://developer.allegro.pl/rules/'

tags:
  - name: Public offer information
  - name: Public user information

  - name: Categories and parameters

  - name: User's offer information
  - name: Offer management
  - name: Products
  - name: Classifieds
  - name: Images and attachments
  - name: Pricing
  - name: Batch offer modification
  - name: Size tables
  - name: Points of service
  - name: Contacts
  - name: Additional services
  - name: After sale services
  - name: Offer variants
  - name: Sets and rebates
  - name: Listing badges
  - name: Delivery
  - name: Offer tags
  - name: Order management
  - name: Disputes
  - name: User information
  - name: Account information

security:
  - bearer-token-for-user: []

paths:
  '/offers/{offerId}/change-price-commands/{commandId}':
    put:
      tags:
        - Offer management
      summary: 'Modify the Buy Now price in an offer'
      description:
        'Use this resource to change the Buy Now price in a single offer.
         <a href="../../news/2016-08-01-zmiana-ceny/" target="_blank">Read more</a>.'
      operationId: createChangePriceCommandUsingPUT
      parameters:
        - name: offerId
          in: path
          description: The offer identifier.
          required: true
          schema:
            type: string
        - name: commandId
          in: path
          description: The unique command id generated by you.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The command was created successfully and is queued for processing.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ChangePrice'
        default:
          description: >-
            An immediate error response is returned whether the command input data is not valid or there is an internal
            problem with our systems.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ChangePriceWithoutOutput'
        required: true
  /sale/offers:
    post:
      tags:
        - Offer management
      summary: 'Create a draft offer'
      description:
        'Use this resource to create a draft offer. <a href="../../sale/#step-6-draft" target="_blank">Read more</a>.'
      operationId: createOfferUsingPOST
      responses:
        '200':
          description: Offer created successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Offer'
        '201':
          description: Created
        '400':
          description: Syntactically incorrect request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      requestBody:
        $ref: '#/components/requestBodies/Offer'
    get:
      tags:
        - User's offer information
      summary: "Get seller's offers"
      description: >-
        Use this resource to get the list of the seller's offers. You can use different query parameters to filter
        the list.
      operationId: searchOffersUsingGET
      parameters:
        - name: name
          in: query
          description: The text to search in the offer title.
          required: false
          schema:
            type: string
        - name: sellingMode.price.amount.gte
          in: query
          description: The lower threshold of price.
          required: false
          schema:
            type: number
            example: 9.99
        - name: sellingMode.price.amount.lte
          in: query
          description: The upper threshold of price.
          required: false
          schema:
            type: number
            example: 125.99
        - name: publication.status
          in: query
          description: >-
            The publication status of the offer. You can add more than one value separating them with a comma. Then,
            this will search for offers with any of the given statuses.
          required: false
          schema:
            type: string
            enum:
              - INACTIVE
              - ACTIVE
              - ACTIVATING
              - ENDED
            default: INACTIVE,ACTIVE,ACTIVATING,ENDED
        - name: sellingMode.format
          in: query
          required: false
          description: >-
            The offer's selling format. You can add more than one value separating them with a comma. Then, this will
            search for offers with any of the given formats.
          schema:
            type: string
            enum:
              - BUY_NOW
              - ADVERTISEMENT
              - AUCTION
            default: BUY_NOW,ADVERTISEMENT,AUCTION
        - name: external.id
          in: query
          description: The ID from the client's external system.
          required: false
          schema:
            type: string
            maxLength: 100
        - name: sort
          in: query
          description: >-
            The results' sorting order. No prefix in the value means ascending order. `-` prefix means descending order.
            If you don't provide the sort parameter, the list is sorted by offer creation time, descending.
          required: false
          schema:
            type: string
            enum:
              - sellingMode.price.amount
              - -sellingMode.price.amount
              - stock.sold
              - -stock.sold
              - stock.available
              - -stock.available
        - name: limit
          in: query
          required: false
          description: >-
            The maximum number of offers returned in the response.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 1000
            default: 20
        - name: offset
          in: query
          required: false
          description: Index of the first returned offer from all search results.
          schema:
            type: integer
            format: int32
            minimum: 0
      responses:
        '200':
          description: The list of offers returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/OffersSearchResultDto'
        '400':
          description: The request query parameters are invalid.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/offers/{offerId}':
    put:
      tags:
        - Offer management
      summary: 'Complete a draft offer or edit an offer'
      description:
        'Use this resource to complete a draft offer or edit ongoing offers. <a href="../../sale/#step-7-complete" target="_blank">Read more</a>.'
      operationId: updateOfferUsingPUT
      parameters:
        - name: offerId
          in: path
          description: offerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Offer updated successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Offer'
        '201':
          description: Created
        '400':
          description: Syntactically incorrect request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      requestBody:
        $ref: '#/components/requestBodies/Offer'
    get:
      tags:
        - User's offer information
      summary: 'Get all fields of the particular offer'
      description:
        'Use this resource to retrieve all fields of the particular offer. <a href="../../sale/#similar-offer" target="_blank">Read more</a>.'
      operationId: getOfferUsingGET
      parameters:
        - name: offerId
          in: path
          description: offerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Offer returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Offer'
        '400':
          description: Syntactically incorrect request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - Offer management
      summary: 'Delete a draft offer'
      description:
        'Use this resource to delete a draft offer. <a href="../../news/2018-10-09_draft_delete/" target="_blank">Read more</a>.'
      operationId: deleteOfferUsingDELETE
      parameters:
        - name: offerId
          in: path
          description: offerId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/sale/offer-publication-commands/{commandId}':
    put:
      tags:
        - Offer management
      summary: 'Batch offer publish / unpublish'
      description:
        'Use this resource to modify multiple offers publication at once. <a href="../../sale/#step-8-offer-publication-commands" target="_blank">Read more</a>.'
      operationId: changePublicationStatusUsingPUT
      parameters:
        - name: commandId
          in: path
          description: commandId
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Command was registered
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '400':
          description: Semantically incorrect request or provided conditions not correct
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Command id was already used
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/PublicationChangeCommandDto'
        description: publicationChangeCommandDto
        required: true
    get:
      tags:
        - Offer management
      summary: "Publish command summary"
      description:
        'Use this resource to retrieve information about the offer listing statuses. You will receive a summary with
         a number of correctly listed offers and errors. <a href="../../sale/#step-8-offer-publication-commands" target="_blank">Read more</a>.'
      operationId: getPublicationReportUsingGET
      parameters:
        - name: commandId
          in: path
          description: commandId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: report was generated and successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Command not found
  '/sale/offer-publication-commands/{commandId}/tasks':
    get:
      tags:
        - Offer management
      summary: 'Publish command detailed report'
      description:
        'Use this resource to retrieve information about the offer statuses on the site (Defaults: limit = 100,
         offset = 0). <a href="../../sale/#step-8-offer-publication-commands" target="_blank">Read more</a>.'
      operationId: getPublicationTasksUsingGET
      parameters:
        - name: commandId
          in: path
          description: commandId
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Task status successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/TaskReport'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Command not found
  '/sale/offer-classifieds-packages/{offerId}':
    get:
      tags:
        - Classifieds
      summary: Get classified packages assigned to an offer
      description:
        'Use this resource to retrieve classified packages currently assigned to an offer.'
      operationId: getClassifiedPackagesUsingGET
      parameters:
        - name: offerId
          in: path
          description: Offer ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Packages returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ClassifiedResponse'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Classified not found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
    put:
      tags:
        - Classifieds
      summary: Assign packages to a classified
      description:
        'Use this resource to assign classified packages to an offer.'
      operationId: assignClassifiedPackagesUsingPUT
      parameters:
        - name: offerId
          in: path
          description: The offer ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Packages have been successfully assigned to the classified.
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '422':
          description: Validation error
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
      requestBody:
        description: Packages that should be assigned to the classified.
        required: true
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ClassifiedPackages'
  '/sale/classifieds-packages':
    get:
      tags:
        - Classifieds
      summary: Get configurations of packages
      description:
        'Use this resource to retrieve configurations of classifieds packages for a category.'
      operationId: getClassifiedPackageConfigurationsForCategoryUsingGET
      parameters:
        - name: category.id
          in: query
          description: The category ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Package configurations for the category returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ClassifiedPackageConfigs'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
  '/sale/classifieds-packages/{packageId}':
    get:
      tags:
        - Classifieds
      summary: Get the configuration of a package
      description:
        'Use this resource to retrieve the configuration of a classifieds package.'
      operationId: getClassifiedPackageConfigurationUsingGET
      parameters:
        - name: packageId
          in: path
          description: The classifieds package ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The package's configuration returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ClassifiedPackageConfig'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The classifieds package not found.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
  '/users/{userId}/ratings-summary':
    get:
      tags:
        - Public user information
      summary: "Get any user's ratings summary"
      description:
        'Use this resource to receive feedback statistics. <a href="../../news/2017-10-09-news_informacje_o_ocenach/" target="_blank">Read more</a>.'
      operationId: getUserSummaryUsingGET
      parameters:
        - name: userId
          in: path
          description: The ID of the user.
          required: true
          schema:
            type: string
            example: "41846511"
      responses:
        '200':
          description: Feedback statistics returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/UserRatingSummaryResponse'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '404':
          description: User with the given ID not found or user is not a seller.
  /sale/user-ratings:
    get:
      tags:
        - User information
      summary: "Get the user's ratings"
      description:
        'Use this resource to receive your sales score. <a href="../../news/2017-10-09-news_informacje_o_ocenach/" target="_blank">Read more</a>.'
      operationId: getUserRatingsUsingGET
      parameters:
        - name: user.id
          in: query
          description: 'Filter by user id, you are allowed to get your ratings only'
          required: true
          schema:
            type: string
        - name: recommended
          in: query
          description: Filter by recommended
          required: false
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
        - name: offset
          in: query
          description: Offset
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 20000
            default: 0
        - name: limit
          in: query
          description: Limit
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/UserRatingListResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /sale/offer-additional-services/groups:
    post:
      tags:
        - Additional services
      summary: 'Create additional services group'
      description:
        'Use this resource to create a group of additional services. <a href="../../news/2017-10-25-news_uslugi_dodatkowe/#2" target="_blank">Read more</a>.'
      operationId: createAdditionalServicesGroupUsingPOST
      responses:
        '201':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AdditionalServicesGroupResponse'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable entity
      requestBody:
        $ref: '#/components/requestBodies/AdditionalServicesGroupRequest'
    get:
      tags:
        - Additional services
      summary: "Get the user's additional services groups"
      description:
        'Use this resource to retrieve a list of groups with additional services available to a given user which you
         may assign to offers. <a href="../../news/2017-10-25-news_uslugi_dodatkowe/#4" target="_blank">Read more</a>.'
      operationId: getListOfAdditionalServicesGroupsUsingGET
      parameters:
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            format: int32
            default: 1000
        - name: user.id
          in: query
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AdditionalServicesGroups'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /sale/loyalty/promotions:
    post:
      tags:
        - Sets and rebates
      summary: "Create a new promotion"
      description: |
        This endpoint creates a new promotion. You can define the following types of promotions:

        1. Bundle

        In order to create a new bundle, you have to define a
         promotion with a single benefit of type **ORDER_FIXED_DISCOUNT** and a single criterion of type **CONTAINS_OFFERS**. In the benefit specification you have to declare the discount amount that you want to be deducted from the sum of bundled offers prices. In the offer criterion you need to pass a list of offers that are to be grouped as a bundle. For each offer you have to define a fixed quantity (that many pieces of your offer will be part of the bundle) and you also have to set a promotionEntryPoint flag (offers with this flag set to true will have a section that allows the users to purchase your bundle).

        2. Multipack

        In order to create a new multipack, you have to define a promotion with a single benefit of type **UNIT_PERCENTAGE_DISCOUNT** and a single criterion of type **CONTAINS_OFFERS**. The benefit specification should contain a configuration section with a percentage which indicates the specific discount for the discounted offer. This percentage should be an integer value greater than 15 for quantity 2, greater than 30 for quantity 3, greater than 40 for quantity 4, greater than 50 for quantity 5 and lower than or equal to 100. The specification should also contain a trigger section with a field forEachQuantity that defines the amount of items in the multipack which is necessary to trigger the benefit. Additionally, the discountedNumber field must be set to 1 by default as you can only discount one unit in a multipack. Finally, the offer criterion specifies the offer for which the multipack promotion will take effect.

        3. Cross-offer multipack

        A cross-offer multipack is created in the same fashion as a standard multipack. The only difference is that you need to pass
        more than 1 offer in the offer criterion section. This group of offers is then considered as a pool from which users can
        pick and choose forEachQuantity offers and the cheapest of them gets a discount.

        Read more about <a href="../../news/2017-10-18-news_promocyjne_zestawy_ofert/" target="_blank">bundles</a>, <a href="../../news/2018-02-01-rabaty_ilosciowe/" target="_blank">multipack</a> and <a href="../../news/2018-10-08-rabaty_ilosciowe/" target="_blank">cross-offer multipack</a>.

        **Example request bodies:**
        1) Bundle
        ```
        {
          "benefits": [
            {
              "specification": {
                "type": "ORDER_FIXED_DISCOUNT",
                "value": {
                  "amount": "10",
                  "currency": "PLN"
                }
              }
            }
          ],
          "offerCriteria": [
            {
              "type": "CONTAINS_OFFERS",
              "offers": [
                {
                  "id": "1122334455",
                  "quantity": 2,
                  "promotionEntryPoint": true
                },
                {
                  "id": "2233445566",
                  "quantity": 1,
                  "promotionEntryPoint": false
                }
              ]
            }
          ]
        }
        ```
        2) Multipack
        ```
        {
          "benefits": [
            {
              "specification": {
                "type": "UNIT_PERCENTAGE_DISCOUNT",
                "configuration": {
                  "percentage": "100"
                },
                "trigger": {
                  "forEachQuantity": "3",
                  "discountedNumber": "1"
                }
              }
            }
          ],
          "offerCriteria": [
            {
              "type": "CONTAINS_OFFERS",
              "offers": [
                {
                  "id": "1122334455"
                }
              ]
            }
          ]
        }
        ```
        3) Cross-offer multipack
        ```
        {
          "benefits": [
            {
              "specification": {
                "type": "UNIT_PERCENTAGE_DISCOUNT",
                "configuration": {
                  "percentage": "100"
                },
                "trigger": {
                  "forEachQuantity": "3",
                  "discountedNumber": "1"
                }
              }
            }
          ],
          "offerCriteria": [
            {
              "type": "CONTAINS_OFFERS",
              "offers": [
                {
                  "id": "1122334455"
                },
                {
                  "id": "2233445566"
                },
              ]
            }
          ]
        }
        ```
      operationId: createPromotionUsingPOST_1
      responses:
        '201':
          description: Successfully created the requested promotion
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/SellerRebateDto'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '422':
          description: >-
            Validation failed - your request was correct, but the promotion
            could not be created.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/SellerCreateRebateRequestDto'
        description: request
        required: true
    get:
      tags:
        - Sets and rebates
      summary: "Get the user's list of promotions"
      description: >-
        Get a list of promotions defined by the specified user. You can list
        only your own promotions.
        Read more about <a href="../../news/2017-10-18-news_promocyjne_zestawy_ofert/#2" target="_blank">Bundles</a>
        and <a href="../../news/2018-02-01-rabaty_ilosciowe/#2" target="_blank">Multipack</a>.
      operationId: listSellerPromotionsUsingGET_1
      parameters:
        - name: user.id
          in: query
          description: user.id
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            format: int32
            default: 50
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: Successfully returned the requested list of promotions
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/SellerRebatesDto'
        '400':
          description: Bad request
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: User id not found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
  '/sale/loyalty/promotions/{promotionId}':
    get:
      tags:
        - Sets and rebates
      summary: "Get a promotion data by id"
      description:
        'Use this resource to returns the requested promotion. You need to use its unique id.
         Read more about <a href="../../news/2017-10-18-news_promocyjne_zestawy_ofert/#3" target="_blank">bundles</a>
         and <a href="../../news/2018-02-01-rabaty_ilosciowe/#3" target="_blank">multipack</a>.'
      operationId: getPromotionUsingGET
      parameters:
        - name: promotionId
          in: path
          description: promotionId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned the requested promotion
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/SellerRebateDto'
        '404':
          description: Promotion not found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
    delete:
      tags:
        - Sets and rebates
      summary: "Deactivate a promotion by id"
      description:
        'Use this resource to deactivate the requested promotion. You need to use its unique id.
         Read more about <a href="../../news/2017-10-18-news_promocyjne_zestawy_ofert/#4" target="_blank">bundles</a>
         and <a href="../../news/2018-02-01-rabaty_ilosciowe/#4" target="_blank">multipack</a>.'
      operationId: deactivatePromotionUsingDELETE
      parameters:
        - name: promotionId
          in: path
          description: promotionId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deactivated the requested promotion
        '404':
          description: Promotion not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
        '422':
          description: Promotion cannot be reactivated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
  /sale/loyalty/promotion-campaigns:
    post:
      tags:
        - Listing badges
      summary: "Create an application for a promotion campaign"
      description: >-
        For an additional fee, you can place a discount mark on a list of
        offers.
                You have to define promotion id and campaign section giving LISTING_BADGE as the id.
                Your promotion campaign application will be verified and you will be notified of the verification status via e-mail.
                Fees will be charged in accordance with Annex No. 1 to the Daily deals zone regulations.
                <a href="../../offer_bundles/#11" target="_blank">Read more</a>.

      operationId: addPromotionToCampaignUsingPOST
      responses:
        '202':
          description: Promotion campaign application created successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/PromotionCampaignResponseDto'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '422':
          description: >-
            Validation failed - your request was correct, but the promotion
            campaign application could not be created.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/PromotionCampaignRequestDto'
        description: request
        required: true
    get:
      tags:
        - Listing badges
      summary: "Get the user's promotion campaigns"
      description: >-
        Use this resource to retrieve promotion campaigns. You can find promotion campaign by
        promotion id. <a href="../../offer_bundles/#13" target="_blank">Read more</a>.
      operationId: getPromotionCampaignsUsingGET
      parameters:
        - name: promotion.id
          in: query
          description: The promotion unique id
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            format: int32
            default: 50
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: Active or suspended promotion campaigns returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/PromotionCampaignsResponseDto'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Promotion campaign not found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
    delete:
      tags:
        - Listing badges
      summary: "Delete a campaign in a promotion"
      description:
        'Use this resource to delete campaign from promotion by promotion id and campaign id.
         <a href="../../offer_bundles/#16" target="_blank">Read more</a>.'
      operationId: deleteCampaignFromPromotionUsingDELETE
      parameters:
        - name: promotion.id
          in: query
          description: The promotion unique id
          required: true
          schema:
            type: string
        - name: campaign.id
          in: query
          description: The campaign unique id
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Campaign deletion requested successfully
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Promotion not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
        '422':
          description: Campaign cannot be deleted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
  '/sale/loyalty/promotion-campaign-applications/{applicationId}':
    get:
      tags:
        - Listing badges
      summary: "Get an application for promotion campaign"
      description:
        'Use this resource to retrieve promotion campaign application. You need to use its unique id.
         <a href="../../offer_bundles/#12" target="_blank">Read more</a>.'
      operationId: getPromotionCampaignApplicationUsingGET
      parameters:
        - name: applicationId
          in: path
          description: The application unique id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned promotion campaign application
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                type: object
        '303':
          description: Promotion campaign application verified and accepted
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Promotion campaign application not found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
    delete:
      tags:
        - Listing badges
      summary: "Delete an application for promotion campaign"
      description: >-
        Use this resource to delete promotion campaign application by application id. You need to
        use its unique id. <a href="../../offer_bundles/#15" target="_blank">Read more</a>.
      operationId: deletePromotionCampaignApplicationUsingDELETE
      parameters:
        - name: applicationId
          in: path
          description: The application unique id
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Promotion campaign application deletion requested successfully
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Promotion campaign application not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
        '422':
          description: Promotion campaign application cannot be deleted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
  /pricing/fee-preview:
    post:
      tags:
        - Pricing
      summary: "Preview offer fees"
      description: >-
        This endpoint calculates fees for a provided offer conditions.

        The quotation is estimated and based on the current configuration of the
        Allegro price list and the data entered in this API.

        The stated price does not include package discounts.

        The rules of charging and amount of charges are described in the Allegro
        regulations in Appendix 4.

        The final amount of the fee for the offer will be available after
        approval under the tab: My Account> Accounts> History.
        <a href="../../news/2017-10-30-kalkulator_ogloszenia/" target="_blank">Read more</a>.
      operationId: previewFeesPublicAPIUsingPOST
      responses:
        '200':
          description: Returns applicable fees
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Wraps_listing_and_commissions_fees'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '422':
          description: >-
            Server understands the content but can not process the requested
            data (example not existing categoryId)
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/Wrapper_type_for_preview_conditions'
        description: command
        required: true
  /pricing/offer-fee-preview:
    post:
      tags:
        - Pricing
      summary: 'Calculate fee and commission for an offer'
      description:
        'Provides information about fee and commission for an offer.'
      operationId: calculateFeePreviewUsingPOST
      responses:
        '200':
          description: Fee calculated successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/FeePreviewResponse'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '422':
          description: Unprocessable entity
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/PublicOfferPreviewRequest'
        required: true
  '/sale/offer-modification-commands/{commandId}':
    put:
      tags:
        - Batch offer modification
      summary: 'Batch offer modification'
      description:
        'Use this resource to modify multiple offers at once. <a href="../../news/2018-04-19-news_grupowa_edycja_ofert_update/#1" target="_blank">Read more</a>.'
      operationId: modificationCommandUsingPUT
      parameters:
        - name: commandId
          in: path
          description: commandId
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Command was registered
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '400':
          description: Semantically incorrect request or provided conditions not correct
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Command id was already used
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/OfferChangeCommand'
        description: offerChangeCommandDto
        required: true
    get:
      tags:
        - Batch offer modification
      summary: "Modification command summary"
      description:
        'Use this resource to find out how many offers were edited within one {commandId}. You will receive a summary
         with a number of successfully edited offers. <a href="../../news/2018-04-19-news_grupowa_edycja_ofert_update/#2" target="_blank">Read more</a>.'
      operationId: getGeneralReportUsingGET
      parameters:
        - name: commandId
          in: path
          description: commandId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: report was generated and successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Command not found
  '/sale/offer-modification-commands/{commandId}/tasks':
    get:
      tags:
        - Batch offer modification
      summary: "Modification command detailed report"
      description:
        'Use this resource to retrieve a detailed summary of changes introduced within one {commandId} (defaults:
         limit = 100, offset = 0). <a href="../../news/2018-04-19-news_grupowa_edycja_ofert_update/#2" target="_blank">Read more</a>.'
      operationId: getTasksUsingGET
      parameters:
        - name: commandId
          in: path
          description: commandId
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Task status successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/TaskReport'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Command not found
  '/sale/offer-price-change-commands/{commandId}':
    put:
      tags:
        - Batch offer modification
      summary: "Batch offer price modification"
      operationId: priceModificationCommandUsingPUT
      parameters:
        - name: commandId
          in: path
          description: commandId
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Command was registered
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '400':
          description: Semantically incorrect request or provided conditions not correct
        '401':
          description: Unauthorized
        '409':
          description: Command id was already used
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/OfferPriceChangeCommand'
        description: offerPriceChangeCommandDto
        required: true
    get:
      tags:
        - Batch offer modification
      summary: "Change price command summary"
      operationId: getPriceModificationCommandStatusUsingGET
      parameters:
        - name: commandId
          in: path
          description: commandId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: report was generated and successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '401':
          description: Unauthorized
        '404':
          description: Command not found
  '/sale/offer-price-change-commands/{commandId}/tasks':
    get:
      tags:
        - Batch offer modification
      summary: "Change price command detailed report"
      description: 'Defaults: limit = 100, offset = 0'
      operationId: getPriceModificationCommandTasksStatusesUsingGET
      parameters:
        - name: commandId
          in: path
          description: commandId
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Task status successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/TaskReport'
        '401':
          description: Unauthorized
        '404':
          description: Command not found
  '/sale/offer-quantity-change-commands/{commandId}':
    put:
      tags:
        - Batch offer modification
      summary: "Batch offer quantity modification"
      operationId: quantityModificationCommandUsingPUT
      parameters:
        - name: commandId
          in: path
          description: commandId
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Command was registered
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '400':
          description: Semantically incorrect request or provided conditions not correct
        '401':
          description: Unauthorized
        '409':
          description: Command id was already used
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/OfferQuantityChangeCommand'
        description: offerQuantityChangeCommandDto
        required: true
    get:
      tags:
        - Batch offer modification
      summary: "Change quantity command summary"
      operationId: getQuantityModificationCommandStatusUsingGET
      parameters:
        - name: commandId
          in: path
          description: commandId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: report was generated and successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '401':
          description: Unauthorized
        '404':
          description: Command not found
  '/sale/offer-quantity-change-commands/{commandId}/tasks':
    get:
      tags:
        - Batch offer modification
      summary: 'Change quantity command detailed report'
      description: 'Defaults: limit = 100, offset = 0'
      operationId: getQuantityModificationCommandTasksStatusesUsingGET
      parameters:
        - name: commandId
          in: path
          description: commandId
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Task status successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/TaskReport'
        '401':
          description: Unauthorized
        '404':
          description: Command not found
  /sale/categories:
    get:
      tags:
        - Categories and parameters
      summary: 'Get IDs of Allegro categories'
      description: >-
        Use this resource to traverse the Allegro categories tree. It returns the list of the given category's children
        or a list of the main Allegro categories. <a href="../../sale/#categories" target="_blank">Read more</a>.
      operationId: getCategoriesUsingGET
      security:
        - bearer-token-for-application: []
        - bearer-token-for-user: []
      parameters:
        - name: parent.id
          in: query
          description: >-
            The ID of the category which children should be returned. If omitted, the list of main Allegro categories
            will be returned.
          required: false
          schema:
            type: string
            default: 954b95b6-43cf-4104-8354-dea4d9b10ddf
      responses:
        200:
          description: The list of categories returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CategoriesDto'
        404:
          description: The category with the given ID does not exist.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/categories/{categoryId}':
    get:
      tags:
        - Categories and parameters
      summary: 'Get a category by ID'
      description: >-
        Use this resource to get the details of a specific category.
        <a href="../../news/2018-07-09-wielowariantowosc/#01" target="_blank">Read more</a>.
      operationId: getCategoryUsingGET_1
      security:
        - bearer-token-for-application: []
        - bearer-token-for-user: []
      parameters:
        - name: categoryId
          in: path
          description: The category ID.
          required: true
          schema:
            type: string
            example: "6061"
      responses:
        200:
          description: The details of a category returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        404:
          description: The category with the given ID does not exist.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/categories/{categoryId}/parameters':
    get:
      tags:
        - Categories and parameters
      summary: 'Get parameters supported by a category'
      description: >-
        Use this resource to get the list of parameters that are supported by the given category.
        <a href="../../sale/#parameters" target="_blank">Read more</a>.
      operationId: getFlatParametersUsingGET_2
      security:
        - bearer-token-for-application: []
        - bearer-token-for-user: []
      parameters:
        - name: categoryId
          in: path
          description: The category ID.
          required: true
          schema:
            type: string
            example: "709"
      responses:
        200:
          description: The list of parameters for the category returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CategoryParameterList'
              examples:
                integer:
                  summary: Integer
                  value:
                    id: "202877"
                    name: "Liczba rdzeni procesora"
                    type: "integer"
                    required: false
                    unit: null
                    options:
                      variantsAllowed: true
                      variantsEqual: false
                    restrictions:
                      min: 0
                      max: 1000000
                      range: false
                string_single:
                  summary: String single
                  value:
                    id: "224017"
                    name: "Kod producenta"
                    type: "string"
                    required: false
                    unit: null
                    options:
                      variantsAllowed: false
                      variantsEqual: false
                    restrictions:
                      minLength: 2
                      maxLength: 35
                      allowedNumberOfValues: 1
                dictionary:
                  summary: Dictionary
                  value:
                    id: "11323"
                    name: "Stan"
                    type: "dictionary"
                    required: false
                    unit: null
                    options:
                      variantsAllowed: false
                      variantsEqual: true
                    dictionary:
                      - id: "11323_1"
                        value: "Nowy"
                      - id: "11323_2"
                        value: "Używany"
                      - id: "11323_238066"
                        value: "Po zwrocie"
                      - id: "11323_238058"
                        value: "Powystawowy"
                      - id: "11323_238062"
                        value: "Uszkodzony"
                      - id: "11323_246534"
                        value: "Odnowiony przez producenta"
                    restrictions:
                      multipleChoices: false
                float:
                  summary: Float
                  value:
                    id: "17448"
                    name: "Waga (z opakowaniem)"
                    type: "float"
                    required: false
                    unit: "kg"
                    options:
                      variantsAllowed: false
                      variantsEqual: false
                    restrictions:
                      min: 0
                      max: 1000000
                      range: false
                      precision: 3
                float_range:
                  summary: Float range
                  value:
                    id: "211966"
                    name: "Zakres regulacji wysokości koszenia"
                    type: "float"
                    required: false
                    unit: "cm"
                    options:
                      variantsAllowed: false
                      variantsEqual: false
                    restrictions:
                      min: 0
                      max: 1000
                      range: true
                      precision: 2
        404:
          description: The category with the given ID does not exist.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  /sale/offer-additional-services/definitions:
    get:
      tags:
        - Additional services
      summary: "Get the user's additional services definitions"
      description:
        'Use this resource to get additional services definitions by user ID. <a href="../../news/2017-10-25-news_uslugi_dodatkowe/#1" target="_blank">Read more</a>.'
      operationId: getListOfAdditionalServicesDefinitionsUsingGET
      parameters:
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            format: int32
            default: 100
        - name: user.id
          in: query
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/DefinitionsResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /sale/shipping-rates:
    get:
      tags:
        - Delivery
      summary: "Get the user's shipping rates"
      description:
        'Use this resource to get a list of seller''s shipping rates. <a href="../../sale/#shipping-rates" target="_blank">Read more</a>.'
      operationId: getListOfShippingRatestUsingGET
      parameters:
        - name: seller.id
          in: query
          description: id of shipping rates owner
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                type: object
                properties:
                  shippingRates:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Shipping rate ID
                        name:
                          type: string
                          description: User defined name of the shipping rates set
              examples:
                response:
                  value:
                    - id: 758fcd59-fbfa-4453-ae07-4800d72c2ca5
                      name: Mój cennik
        '401':
          description: Authentication required
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
    post:
      tags:
        - Delivery
      summary: "Create a new shipping rates set"
      description:
        'Use this resource to create a new seller''s shipping rates set. <a href="../../sale/#shipping-rates" target="_blank">Read more</a>.'
      operationId: createShippingRatesSetUsingPOST
      requestBody:
        description: Shipping rates set
        required: true
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ShippingRatesSet'
      responses:
        '201':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ShippingRatesSet"
        '401':
          description: Authentication required
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '422':
          description: The user has reached the limit of shipping rates sets. Information on the limit will be returned in the error message.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
  '/sale/shipping-rates/{id}':
    get:
      tags:
        - Delivery
      summary: 'Get the details of a shipping rates set'
      description:
        'Use this resource to get details of the given shipping rates set. <a href="../../sale/#shipping-rates" target="_blank">Read more</a>.'
      operationId: getShippingRatesSetUsingGET
      parameters:
        - name: id
          in: path
          description: id of shipping rates set
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ShippingRatesSet"
              examples:
                response:
                  value:
                    id: 758fcd59-fbfa-4453-ae07-4800d72c2ca6
                    name: Mój cennik
                    rates:
                      - deliveryMethod:
                          id: 758fcd59-fbfa-4453-ae07-4800d72c2ca5
                        maxQuantityPerPackage: 6
                        firstItemRate:
                          amount: '12.00'
                          currency: PLN
                        nextItemRate:
                          amount: '2.50'
                          currency: PLN
                        shippingTime:
                          from: P1D
                          to: P20D
                    lastModified: '2018-04-05T12:20:23.974Z'
        '401':
          description: Authentication required
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Shipping rates set with given ID not found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
    put:
      tags:
        - Delivery
      summary: "Edit a user's shipping rates set"
      description:
        'Use this resource to edit a new seller''s shipping rates set. <a href="../../sale/#shipping-rates" target="_blank">Read more</a>.'
      operationId: modifyShipiingRatesSetUsingPUT
      parameters:
        - name: id
          in: path
          description: id of shipping rates set
          required: true
          schema:
            type: string
      requestBody:
        description: Shipping rates set
        required: true
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: "#/components/schemas/ShippingRatesSet"
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ShippingRatesSet"
        '401':
          description: Authentication required
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Set with given id does not exist
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
  '/points-of-service':
    post:
      tags:
        - Points of service
      summary: 'Create a point of service'
      description:
        'Use this resource to create a point of service. <a href="../../news/2017-08-11-punkty_odbioru/#1" target="_blank">Read more</a>.'
      operationId: createPOSUsingPOST
      responses:
        '201':
          description: Created
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Pos'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
      requestBody:
        $ref: '#/components/requestBodies/Pos'
    get:
      tags:
        - Points of service
      summary: "Get the user's points of service"
      description:
        'Use this resource to get a list of points of service by seller ID. <a href="../../news/2017-08-11-punkty_odbioru/#3" target="_blank">Read more</a>.'
      operationId: getPOSListUsingGET
      parameters:
        - name: seller.id
          in: query
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/SearchResult'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
  '/points-of-service/{id}':
    get:
      tags:
        - Points of service
      summary: "Get the details of a point of service"
      description:
        'Use this resource to get a details of a point of service for a given ID.
         <a href="../../news/2017-08-11-punkty_odbioru/#4" target="_blank">Read more</a>.'
      operationId: getPOSDataUsingGET
      parameters:
        - name: id
          in: path
          description: Point of service ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Pos'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
    put:
      tags:
        - Points of service
      summary: 'Modify a point of service'
      description:
        'Use this resource to modify a point of service. <a href="../../news/2017-08-11-punkty_odbioru/#2" target="_blank">Read more</a>.'
      operationId: modifyPOSUsingPUT
      parameters:
        - name: id
          in: path
          description: >-
            Point of service ID. Must match values with 'id' property from the
            body.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Pos'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
      requestBody:
        $ref: '#/components/requestBodies/Pos'
    delete:
      tags:
        - Points of service
      summary: 'Delete a point of service'
      description:
        'Use this resource to delete a point of service. <a href="../../news/2017-08-11-punkty_odbioru/#5" target="_blank">Read more</a>.'
      operationId: deletePOSUsingDELETE
      parameters:
        - name: id
          in: path
          description: Point of service ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /sale/offer-contacts:
    post:
      tags:
        - Contacts
      summary: 'Create a new contact'
      description:
        'Use this resource to create a new contact. <a href="../../news/2018-01-17-news_zarzadzanie_kontaktami/#1" target="_blank">Read more</a>.'
      operationId: createContactUsingPOST
      responses:
        '201':
          description: Created
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ContactResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
        description: New contact
        required: true
    get:
      tags:
        - Contacts
      summary: "Get the user's contacts"
      description:
        'Use this resource to get details of many contacts. <a href="../../news/2018-01-17-news_zarzadzanie_kontaktami/#4" target="_blank">Read more</a>.'
      operationId: getListOfContactsUsingGET
      parameters:
        - name: seller.id
          in: query
          description: id of contacts owner
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ContactResponseList'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/sale/offer-contacts/{id}':
    get:
      tags:
        - Contacts
      summary: "Get contact details"
      description:
        'Use this resource to get contact details. <a href="../../news/2018-01-17-news_zarzadzanie_kontaktami/#3" target="_blank">Read more</a>.'
      operationId: getContactUsingGET
      parameters:
        - name: id
          in: path
          description: Contact id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ContactResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
        - Contacts
      summary: "Modify contact details"
      description:
        'Use this resource to modify contact details. <a href="../../news/2018-01-17-news_zarzadzanie_kontaktami/#2" target="_blank">Read more</a>.'
      operationId: modifyContactUsingPUT
      parameters:
        - name: id
          in: path
          description: Contact id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ContactResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
        description: Contact
        required: true
  /sale/delivery-methods:
    get:
      tags:
        - Delivery
      summary: "Get the list of available delivery methods"
      description:
        'Use this resource to get a list of available delivery methods. <a href="../../sale/#shipping-rates" target="_blank">Read more</a>.'
      operationId: getListOfDeliveryMethodsUsingGET
      security:
        - bearer-token-for-application: []
        - bearer-token-for-user: []
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                type: object
                properties:
                  deliveryMethods:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Delivery method ID
                        name:
                          type: string
                          description: Delivery method name
                        paymentPolicy:
                          type: string
                          enum:
                            - IN_ADVANCE
                            - CASH_ON_DELIVERY
                          description: Whether the payment is to be collected in advance or on delivery
              examples:
                response:
                  value:
                    - id: 758fcd59-fbfa-4453-ae07-4800d72c2ca5
                      name: List polecony priorytetowy
                      paymentPolicy: IN_ADVANCE
        '401':
          description: Authentication required
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
  '/sale/offer-additional-services/groups/{groupId}':
    get:
      tags:
        - Additional services
      summary: "Get the details of an additional services group"
      description:
        'Use this resource to get additional services group for a given ID. <a href="../../news/2017-10-25-news_uslugi_dodatkowe/#5" target="_blank">Read more</a>.'
      operationId: getAdditionalServicesGroupUsingGET
      parameters:
        - name: groupId
          in: path
          description: Additional Service Group ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AdditionalServicesGroupResponse'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    put:
      tags:
        - Additional services
      summary: "Modify an additional services group"
      description:
        'Use this resource to modify existing additional service group. <a href="../../news/2017-10-25-news_uslugi_dodatkowe/#3" target="_blank">Read more</a>.'
      operationId: modifyAdditionalServicesGroupUsingPUT
      parameters:
        - name: groupId
          in: path
          description: additional service group ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AdditionalServicesGroupResponse'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      requestBody:
        $ref: '#/components/requestBodies/AdditionalServicesGroupRequest'
  '/sale/size-tables/{tableId}':
    get:
      tags:
        - Size tables
      summary: 'Get a size table details'
      description:
        'Use this resource to get selected size table. <a href="../../news/2018-04-19-news_tabele_rozmiarow/" target="_blank">Read more</a>.'
      operationId: getTableUsingGET
      parameters:
        - name: tableId
          in: path
          description: tableId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Size table returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/PublicTableDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /after-sales-service-conditions/return-policies:
    get:
      tags:
        - After sale services
      summary: "Get the user's return policies"
      description:
        'Use this resource to get seller return policies listing. <a href="../../news/2017-04-05-news_warunki_oferty/" target="_blank">Read more</a>.'
      operationId: getPublicSellerListingUsingGET_1
      parameters:
        - name: seller.id
          in: query
          description: Filter by user id. You are allowed to get your return policies only.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit
          required: false
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Offset
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ReturnPoliciesList_ReturnPolicyBasic_'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /sale/size-tables:
    get:
      tags:
        - Size tables
      summary: "Get the user's size tables"
      description:
        'Use this resource to get all size tables assigned to a seller account.
         <a href="../../news/2018-04-19-news_tabele_rozmiarow/" target="_blank">Read more</a>.'
      operationId: getTablesUsingGET
      parameters:
        - name: user.id
          in: query
          description: user.id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Size tables returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/PublicTablesDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /after-sales-service-conditions/implied-warranties:
    get:
      tags:
        - After sale services
      summary: "Get the user's implied warranties"
      description:
        'Use this resource to get seller implied warranties listing. <a href="../../news/2017-04-05-news_warunki_oferty/" target="_blank">Read more</a>.'
      operationId: getPublicSellerListingUsingGET
      parameters:
        - name: seller.id
          in: query
          description: Filter by user id. You are allowed to get your implied warranties only.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit
          required: false
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Offset
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: >-
                  #/components/schemas/ImpliedWarrantiesList_ImpliedWarrantyBasic_
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /pricing/offer-quotes:
    get:
      tags:
        - Pricing
      summary: "Get the user's current offer quotes"
      description: >-
        This endpoint returns current offer quotes (listing and promo fees)
        cycles for authenticated user and list of offers.
        <a href="../../news/2018-02-14-zasob_do_sprawdzania_daty_oplaty/" target="_blank">Read more</a>.
        <br/>2018-07-18 - resource update
        <a href="../../news/2018-07-18-aktualizacja_zasob_do_sprawdzania_daty_oplaty/" target="_blank">here</a>.
      operationId: offerQuotesPublicUsingGET
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: offer.id
          in: query
          description: 'List of offer ids, maximum 20 values'
          required: true
          allowEmptyValue: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Returns current offer quotes
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/OfferQuotesDto'
        '400':
          description: Invalid request.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Full authentication is required to access this resource
        '503':
          description: Service is currently unavailable. Please try again later.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  /after-sales-service-conditions/warranties:
    get:
      tags:
        - After sale services
      summary: "Get the user's warranties"
      description:
        'Use this resource to get seller warranties listing. <a href="../../news/2017-04-05-news_warunki_oferty/" target="_blank">Read more</a>.'
      operationId: getPublicSellerListingUsingGET_2
      parameters:
        - name: seller.id
          in: query
          description: Filter by user id. You are allowed to get your warranties only.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit
          required: false
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Offset
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/WarrantiesList_WarrantyBasic_'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/sale/offer-variants/{setId}':
    put:
      tags:
        - Offer variants
      summary: '[BETA] Create or update variant set'
      description: >-
        [BETA] Use this resource to create or update variant set.

         A valid variant set must consist of three required elements:
         - name:
           - it can't be blank and must not be longer than 50 characters
         - parameters:
           - it should contain parameter identifiers used for offer grouping
           - parameter identifiers from the offers and special `color/pattern` value (for grouping via image) are permitted
           - it must contain at least one element (up to 2)
         - offers:
           - it must contain at least 2 offers (500 at most)
           - `colorPattern` value must be set for every offer if `color/pattern` parameter is used
           - `colorPattern` value can't be blank and must not be longer than 50 characters
           - `colorPattern` can take arbitrary string value like `red`, `b323592c-522f-4ec1-b9ea-3764538e0ac4` (UUID), etc.
           - offers having the same image should have identical `colorPattern` value


         Let's assume we have 4 offers:
           - offer with id 2 having an image of a red t-shirt and S as a value of parameter with id 21
           - offer with id 3 having an image of a red t-shirt and M as a value of parameter with id 21
           - offer with id 4 having an image of a blue t-shirt and S as a value of parameter with id 21
           - offer with id 5 having an image of a blue t-shirt and M as a value of parameter with id 21


         You can build a variant set by grouping offers using combination of available parameters:
           - variant set with offer parameter only
           ```
             {
               "name": "t-shirt",
               "offers": [
                 {
                   "id": "2"
                 },
                 {
                   "id": "3"
                 }
               ],
               "parameters": [
                 { "id": "21" }
               ]
             }
           ```
           - variant set with `color/pattern` parameter only
           ```
             {
               "name": "t-shirt",
               "offers": [
                 {
                   "id": "2",
                   "colorPattern": "red"
                 },
                 {
                   "id": "4",
                   "colorPattern": "blue"
                 }
               ],
               "parameters": [
                 {"id": "color/pattern"}
               ]
             }
           ```
           - variant set with offer and `color/pattern` parameters
           ```
             {
               "name": "t-shirt",
               "offers": [
                 {
                   "id": "2",
                   "colorPattern": "red"
                 },
                 {
                   "id": "3",
                   "colorPattern": "red"
                 },
                 {
                   "id": "4",
                   "colorPattern": "blue"
                 },
                 {
                   "id": "5",
                   "colorPattern": "blue"
                 }
               ],
               "parameters": [
                 {"id": "color/pattern"},
                 {"id": "21"}
               ]
             }
           ```


           More general information about variant sets can be found [here](https://allegro.pl/pomoc/faq/wielowariantowosc-jak-polaczyc-oferty-xGgaOByGgTb#dodatkowe-informacje),
           more information about variant sets API can be found <a href="../../news/2018-07-09-wielowariantowosc/#03" target="_blank">here</a>.
      operationId: createOrUpdateVariantSet
      parameters:
        - name: setId
          in: path
          description: Variant set id
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Variant set created or updated successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      requestBody:
        $ref: '#/components/requestBodies/VariantSetRequest'
    get:
      tags:
        - Offer variants
      summary: '[BETA] Get a variant set'
      description:
        '[BETA] Use this resource to get variant set by set id. <a href="../../news/2018-07-09-wielowariantowosc/#04" target="_blank">Read more</a>.'
      operationId: getVariantSet
      parameters:
        - name: setId
          in: path
          description: setId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Variant set returned successfully
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/VariantSet'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - Offer variants
      summary: '[BETA] Delete a variant set'
      description: >-
        [BETA] Use this resource to delete variant set by id.
        Offers included in variant set will not be stopped or modified by this operation.
        <a href="../../news/2018-07-09-wielowariantowosc/#05" target="_blank">Read more</a>.
      operationId: deleteVariantSet
      parameters:
        - name: setId
          in: path
          description: Variant set id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Variant set deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Variant set not found
  '/sale/offer-variants':
    get:
      tags:
        - Offer variants
      summary: "[BETA] Get the user's variant sets"
      description: >-
        [BETA] Use this resource to get created variant sets.
        The returned variant sets are ordered by name.
        <a href="../../news/2018-07-09-wielowariantowosc/" target="_blank">Read more</a>.
      operationId: getVariantSets
      parameters:
        - name: user.id
          in: query
          description: Filter by user id, you are allowed to get your variant sets only.
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: Index of first returned variant set.
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: limit
          in: query
          description: Maximum number of returned variant sets.
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
        - name: query
          in: query
          description: Filter variant sets by name or offer id.
          required: false
          schema:
            type: string
            maxLength: 50
      responses:
        '200':
          description: Variant sets returned successfully
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/VariantSets'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/sale/images':
    post:
      tags:
        - Images and attachments
      summary: "Upload an offer image"
      description: |
        Upload image to our servers.

        More information about rules for photos in an offer's gallery and description you will find
        <a href="https://allegro.pl/dla-sprzedajacych/nowe-zasady-dla-zdjec-w-galerii-i-w-opisie-YLlAAa2oXf7" target="_blank">here</a>.

        You can choose from two upload options:
          * \- provide a link and we will download an image for you
          * \- send an image as binary data

        **Important!** Remember to use dedicated domain for upload, i.e.
          * \- https://upload.allegro.pl for Production
          * \- https://upload.allegro.pl.allegrosandbox.pl for Sandbox
      operationId: uploadOfferImageUsingPOST
      servers:
        - url: https://upload.{environment}
          variables:
            environment:
              default: allegro.pl
              enum:
                - allegro.pl
                - allegro.pl.allegrosandbox.pl
      responses:
        '201':
          description: Image uploaded correctly
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/OfferImageUploadResponse'
        '400':
          description: Syntactically incorrect request
        '401':
          description: Invalid or missing bearer token
        '413':
          description: Image is too big
        '415':
          description: Unsupported media type
      requestBody:
        $ref: '#/components/requestBodies/OfferImageUploadRequest'
  '/sale/offer-attachments':
    post:
      tags:
        - Images and attachments
      summary: "Create an offer attachment"
      description: |
        You can upload PDF attachments to your offers.
        We will present them under the offer description in the Additional information section.
        You can upload up to 7 attachments – one per item from the list:
          * \- Guide (MANUAL)
          * \- Special offer terms (SPECIAL_OFFER_RULES)
          * \- Competition terms (COMPETITION_RULES)
          * \- Book excerpt (BOOK_EXCERPT)
          * \- Manual (USER_MANUAL)
          * \- Installation manual (INSTALLATION_INSTRUCTIONS)
          * \- Game manual (GAME_INSTRUCTIONS)

        Uploading attachments flow:
          1. Create an attachment object to receive an upload URL (*POST /sale/offer-attachments*),
          2. Use the upload URL to submit the PDF file (*PUT /sale/offer-attachments/{attachmentId}*),
          3. Add the attachment to the offer (*PUT /sale/offers/{offerId}*).

      operationId: createOfferAttachmentUsingPOST
      responses:
        '201':
          description: Attachment created successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/OfferAttachment'
        '400':
          description: Syntactically incorrect request
        '401':
          description: Invalid or missing bearer token
        '415':
          description: Unsupported media type
        '422':
          description: Unprocessable Entity
      requestBody:
        $ref: '#/components/requestBodies/OfferAttachmentRequest'
  '/sale/offer-attachments/{attachmentId}':
    put:
      tags:
        - Images and attachments
      summary: "Upload an offer attachment"
      description: |
        Upload an offer attachment.

        This operation should be used after creating an offer attachment with *POST /sale/offer-attachments*

        **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /sale/offer-attachments*.
        The URL is unique and one-time. As its format may change in time, you should always use the address from the header.
        Do not compose the address on your own.
      operationId: uploadOfferAttachmentUsingPUT
      parameters:
        - name: attachmentId
          in: path
          description: The ID of the attachment.
          required: true
          schema:
            type: string
            format: uuid
      servers:
        - url: https://upload.{environment}
          variables:
            environment:
              default: allegro.pl
              enum:
                - allegro.pl
                - allegro.pl.allegrosandbox.pl
      requestBody:
        content:
          application/pdf:
            schema:
              type: string
              format: binary
              description: File in a binary format
      responses:
        '200':
          description: File uploaded correctly
        '400':
          description: Syntactically incorrect request
        '401':
          description: Invalid or missing bearer token
  /offers/listing:
    get:
      tags:
        - Public offer information
      summary: "Search offers"
      description: >-
        Use this resource to get a list of offers based on the provided query parameters.
        At least one of: phrase, seller.id or category.id is required.
        Additional available parameters vary depending on category.id. The
        parameters are defined in the filters entity.
        <a href="../../news/2018-07-03-listing_ofert/" target="_blank">Read more</a>.
      operationId: getListing
      security:
        - bearer-token-for-application: []
        - bearer-token-for-user: []
      parameters:
        - name: category.id
          in: query
          description: The identifier of the category, where you want to search for offers.
          required: false
          schema:
            type: string
        - name: phrase
          in: query
          description: >-
            The search phrase. The phrase is searched in different fields of the offers depending on the value of the
            `searchMode` parameter.
          required: false
          schema:
            type: string
        - name: seller.id
          in: query
          description: >-
            The identifier of a seller, to limit the results to offers from this seller. May be provided more than once.
          required: false
          schema:
            type: string
        - name: searchMode
          in: query
          description: >-
            Defines where the given phrase should be searched in. Allowed values:

              - *REGULAR* - searching for a phrase in the title,
              - *DESCRIPTIONS* - searching for a phrase in the title and the descriptions,
              - *CLOSED* - searching for a phrase in the title of closed offers.
          required: false
          schema:
            type: string
            enum:
              - REGULAR
              - DESCRIPTIONS
              - CLOSED
            default: REGULAR
        - name: offset
          in: query
          description: >-
            Index of the first returned offer from all search results.
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: >-
            The maximum number of offers in a response.
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 100
            default: 60
        - name: sort
          in: query
          description: >-
            Search results sorting order. `+` or no prefix in the value means ascending order. `-` prefix means
            descending order.
          required: false
          schema:
            type: string
            enum:
              - relevance
              - +price
              - -price
              - +withDeliveryPrice
              - -withDeliveryPrice
              - -popularity
              - +endTime
              - -startTime
            default: relevance
        - name: include
          in: query
          description: >-
            Specify parts of the response that should be included in the output. Allowed values are the names of top
            level entities and *all* as an alias to all entities. By default, all top level entities are included.
            Use `-` prefix to exclude an entity.

            Example:

            `include=-all&include=filters&include=sort` - returns only filters and sort entities.
          required: false
          schema:
            type: string
        - name: fallback
          in: query
          description: >-
            Defines the behaviour of the search engine when no results with exact phrase match are found:

              - *true* - related (not exact) results are returned,
              - *false* - empty results are returned.
          required: false
          schema:
            type: boolean
            default: true
        - name: "\"A filter's ID\""
          in: query
          description: >-
            You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id=value.
            When the filter definition looks like:
              ````
                {
                	"id": "parameter.11323",
                	"type": "MULTI",
                	"name": "Stan",
                	"values": [{
                			"value": "1",
                			"name": "nowe",
                			"count": 21,
                			"selected": false
                		},
                		{
                			"value": "2",
                			"name": "używane",
                			"count": 157,
                			"selected": false
                		},
                		{
                			"value": "238066",
                			"name": "po zwrocie",
                			"count": 1,
                			"selected": false
                		}
                	]
                }
              ````
            You can use 'Stan' filter to query results, i.e.: parameter.11323=1 (for "nowe"), parameter.11323=2 (for "używane") or parameter.11323=238066 (for "po zwrocie")
          example: 127448=2
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The request successfully returns the search result.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ListingResponse'
        '400':
          description: Bad request. Check if all necessary parameters are provided.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ErrorsHolder"
        '404':
          description: Given category was not found. Check category.id parameter.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ErrorsHolder"
        '422':
          description: >-
            One of parameters have invalid value or given parameters combination
            is forbidden.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ErrorsHolder"
        '500':
          description: Internal service error.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ErrorsHolder"
        '502':
          description: Error caused by upstream service failure.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ErrorsHolder"
  '/order/events':
    get:
      tags:
        - Order management
      summary: '[BETA] Get order events'
      description: >-
        [BETA] Use this resource to return events that allow you to monitor actions which clients perform, i.e.
        making a purchase, filling in the checkout form (FOD), finishing payment process, making a surcharge.
        <a href="/orders/#02" target="_blank">Read more</a>.
      operationId: getOrderEventsUsingGET
      parameters:
        - name: from
          in: query
          description: 'You can use the event ID to retrieve subsequent chunks of events'
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: >-
            Specify array of event types for filtering.
            Allowed values are:
              * `BOUGHT`: purchase without checkout form filled in
              * `FILLED_IN`: checkout form filled in but payment is not completed yet so data could still change
              * `READY_FOR_PROCESSING`: payment completed. Purchase is ready for processing.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: 'Limit in the range of 1-1000'
          required: false
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/OrderEventsList'
        '401':
          description: Unauthorized
  '/order/event-stats':
    get:
      tags:
        - Order management
      summary: '[BETA] Get order events statistics'
      description: >-
        [BETA] Use this resource to returns object that contains event id and occurrence date of the latest event.
        It gives you current starting point for reading events.
        <a href="/orders/#02" target="_blank">Read more</a>.
      operationId: getOrderEventsStatisticsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/OrderEventStats'
        '401':
          description: Unauthorized
  '/order/checkout-forms':
    get:
      tags:
        - Order management
      summary: "[BETA] Get the user's orders"
      description: >-
        [BETA] Use this resource to get an order list.
        <a href="/orders/#03" target="_blank">Read more</a>.
      operationId: getListOfOrdersUsingGET
      parameters:
        - name: offset
          in: query
          description: Index of first returned checkout-form from all search results.
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: >-
            Maximum number of checkout-forms in response (acceptable values: from 0 to
            100, default is 100).
          required: false
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
          description: >
            Specify status value that checkout-forms must have to be included in the output.
            Allowed values are:
              * `BOUGHT`: purchase without checkout form filled in
              * `FILLED_IN`: checkout form filled in but payment is not completed yet so data could still change
              * `READY_FOR_PROCESSING`: payment completed. Purchase is ready for processing.
              * `ALL`: return all checkout-forms
        - name: lineItems.boughtAt.lte
          in: query
          schema:
            type: string
            format: date-time
          description: The upper bound of date time range from which checkout forms will be taken.
        - name: lineItems.boughtAt.gte
          in: query
          schema:
            type: string
            format: date-time
          description: The lower bound of date time range from which checkout forms will be taken.
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/CheckoutForms'
        '400':
          description: >
            Bad Request - Returned when request parameters contains illegal values.
        '401':
          description: Unauthorized
        '422':
          description: >
            Unprocessable Entity - Returned when limit or offset value is outside an acceptable range
  '/order/checkout-forms/{id}':
    get:
      tags:
        - Order management
      summary: "[BETA] Get an order's details"
      description: >-
        [BETA] Use this resource to get an order details.
        <a href="/orders/#04" target="_blank">Read more</a>.
      operationId: getOrdersDetailsUsingGET
      parameters:
        - name: id
          in: path
          description: Checkout Form id
          required: true
          schema:
            type: string
            format: uuid
          example: "29738e61-7f6a-11e8-ac45-09db60ede9d6"
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/CheckoutForm'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  '/order/checkout-forms/{id}/shipments':
    get:
      tags:
        - Order management
      summary: "[BETA] Get a list of parcel tracking numbers"
      description: >-
        Get a list of parcel tracking numbers currently assigned to the order.
        Orders can be retrieved using REST API resource GET /order/checkout-forms.
        Please note that the shipment list may contain parcel tracking numbers added
        through other channels such as Moje Allegro or by the carrier that delivers the parcel.
      operationId: getOrderShipmentsUsingGET
      parameters:
        - name: id
          in: path
          description: Order identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            Returns a list of parcel tracking numbers (shipments)
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/CheckoutFormOrderWaybillResponse'
        '401':
          description: Authentication failed, e.g. token is expired
        '404':
          description: Order not found or doesn’t belong to the seller
    post:
      tags:
        - Order management
      summary: "[BETA] Add a parcel tracking number"
      description: >-
        Add a parcel tracking number (shipment) to given order line items.
      operationId: createOrderShipmentsUsingPOST
      parameters:
        - name: id
          in: path
          description: Order identifier
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/vnd.allegro.beta.v1+json:
            schema:
              $ref: '#/components/schemas/CheckoutFormAddWaybillRequest'
        description: request
        required: true
      responses:
        '201':
          description: The request is OK and the parcel tracking number will be assigned to the order
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/CheckoutFormAddWaybillCreated'
        '400':
          description: Missing required field or invalid value in the request (e.g. unknown carrier id, carrier name too long)
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Authentication failed, e.g. token is expired
        '404':
          description: Order not found or doesn’t belong to the seller
        '422':
          description: Some of the provided data is invalid, e.g. line item doesn’t belong to the order
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
  '/sale/disputes':
    get:
      tags:
        - Disputes
      summary: "Get the user's disputes"
      description: >-
        Use this resource to get the list of your disputes.
        <a href="../../news/2018-09-18-dyskusje/#GetAll" target="_blank">Read more</a>.
      operationId: getListOfDisputesUsingGET
      parameters:
        - name: checkoutForm.id
          in: query
          description: CheckoutForm id
          required: false
          schema:
            type: string
            format: uuid
          example: "29738e61-7f6a-11e8-ac45-09db60ede9d6"
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/DisputeListResponse'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  '/sale/disputes/{disputeId}':
    get:
      tags:
        - Disputes
      summary: "Get a single dispute"
      description: >-
        Use this resource to get a single dispute. <a href="../../news/2018-09-18-dyskusje/#GetOne" target="_blank">Read more</a>.
      operationId: getDisputeUsingGET
      parameters:
        - name: disputeId
          in: path
          description: Id of the dispute
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/sale/disputes/{disputeId}/messages':
    get:
      tags:
        - Disputes
      summary: "Get the messages within a dispute"
      description: >-
        Use this resource to get the list of messages within dispute. <a href="../../news/2018-09-18-dyskusje/#GetMessage" target="_blank">Read more</a>.
      operationId: getMessagesFromDisputeUsingGET
      parameters:
        - name: disputeId
          in: path
          description: Id of the dispute
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/DisputeMessageList'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - Disputes
      summary: "Add a message to a dispute"
      parameters:
        - name: disputeId
          in: path
          description: Id of the dispute
          required: true
          schema:
            type: string
            format: uuid
      description: >-
        Use this resource to post a message in certain dispute. At least one of fields: 'text', 'attachment' has to
        be present. <a href="../../news/2018-09-18-dyskusje/#PostMessage" target="_blank">Read more</a>.
      operationId: addMessageToDisputeUsingPOST
      responses:
        '201':
          description: CREATED
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/DisputeMessage'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable entity
      requestBody:
        $ref: '#/components/requestBodies/MessageRequest'
  '/sale/dispute-attachments':
    post:
      tags:
        - Disputes
      summary: "Create an attachment declaration"
      description: >-
        Use this resource to post an attachment declaration. <a href="../../news/2018-09-18-dyskusje/#PostAttach" target="_blank">Read more</a>.
      operationId: createAnAttachmentUsingPOST
      responses:
        '201':
          description: CREATED
          headers:
            Location:
              schema:
                type: string
              description: Use this URL to perform PUT request with binary data file coherent with the attachment declaration.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/DisputeAttachmentId'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Unprocessable entity
      requestBody:
        $ref: '#/components/requestBodies/AttachmentDeclaration'
  '/sale/dispute-attachments/{attachmentId}':
    put:
      tags:
        - Disputes
      summary: "Upload a dispute message attachment"
      description: |
        Upload a dispute message attachment.

        This operation should be used after creating an attachment declaration with *POST /sale/dispute-attachments*

        **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /sale/dispute-attachments*.
        The URL is unique and one-time. As its format may change in time, you should always use the address from the header.
        Do not compose the address on your own.

      operationId: uploadDisputeAttachmentUsingPUT
      parameters:
        - name: attachmentId
          in: path
          required: true
          description: The attachment ID
          schema:
            type: string
            format: uuid
      servers:
        - url: https://upload.{environment}
          variables:
            environment:
              default: allegro.pl
              enum:
                - allegro.pl
                - allegro.pl.allegrosandbox.pl
      responses:
        '201':
          description: File uploaded correctly
        '400':
          description: Syntactically incorrect request
        '401':
          description: Invalid or missing bearer token
        '413':
          description: File is too big
        '415':
          description: Unsupported media type
      requestBody:
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
              description: File in a binary format
          image/gif:
            schema:
              type: string
              format: binary
              description: File in a binary format
          image/bmp:
            schema:
              type: string
              format: binary
              description: File in a binary format
          image/tiff:
            schema:
              type: string
              format: binary
              description: File in a binary format
          image/jpeg:
            schema:
              type: string
              format: binary
              description: File in a binary format
          application/pdf:
            schema:
              type: string
              format: binary
              description: File in a binary format
    get:
      tags:
        - Disputes
      summary: "Get an attachment"
      description: >-
        Use this resource to get an attachment. <a href="../../news/2018-09-18-dyskusje/#GetAttach" target="_blank">Read more</a>.
      operationId: getAttachmentUsingGET
      parameters:
        - name: attachmentId
          in: path
          description: Id of the attachment resource
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/order/line-item-id-mappings':
    get:
      tags:
        - Order management
      summary: "[BETA] Get mapping for line item id"
      description:
        "[BETA] Allows mapping identifiers from dealId to lineItemId and vice-versa. One of defined query parameters
         has to be provided."
      operationId: "findMapping"
      parameters:
        - in: "query"
          name: "lineItemId"
          description: "line item id"
          required: false
          schema:
            type: string
            format: uuid
        - in: "query"
          name: "dealId"
          description: "dealId"
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/LineItemIdMappings'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '422':
          description: Missing required parameter. Provide lineItemId or dealId.
  '/sale/offer-tags':
    post:
      tags:
        - Offer tags
      summary: "Create a tag"
      description: |
        Use this resource to create a new tag. <a href="../../news/2018-09-24-tagi-zalaczniki/#DodajDoKonta" target="_blank">Read more</a>.
      operationId: createTagPOST_1
      responses:
        '200':
          description: Successfully created the requested tag
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/TagId'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '422':
          description: >-
            Validation failed - your request was correct, but the tag
            could not be created.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: User is not brandzone user and doesn't have tags subscription
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/TagRequest'
        description: request
        required: true
    get:
      tags:
        - Offer tags
      summary: "Get the user's tags"
      description: >-
        Use this resource to get a list of tags defined by the specified user (Defaults: limit = 1000, offset = 0).
        <a href="../../news/2018-09-24-tagi-zalaczniki/#PobierzTagi" target="_blank">Read more</a>.
      operationId: listSellerTagsGET_1
      parameters:
        - name: user.id
          in: query
          description: user.id
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfully returned the requested list of tags
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/TagListResponse'
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: User is not brandzone user and doesn't have tags subscription
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'

  '/sale/offer-tags/{tagId}':
    delete:
      tags:
        - Offer tags
      summary: "Delete a tag"
      description:
        'Use this resource to delete the tag. <a href="../../news/2018-09-24-tagi-zalaczniki/#UsunTagZKonta" target="_blank">Read more</a>.'
      operationId: deleteTagUsingDELETE
      parameters:
        - name: tagId
          in: path
          description: tagId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted tag
        '404':
          description: Tag not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: User is not brandzone user and doesn't have tags subscription
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
    put:
      tags:
        - Offer tags
      summary: "Modify a tag"
      description:
        'Use this resource to update a tag. <a href="../../news/2018-09-24-tagi-zalaczniki/#ZmienNazwe" target="_blank">Read more</a>.'
      operationId: updateTagPUT
      parameters:
        - name: tagId
          in: path
          description: tagId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully updated the requested tag
        '422':
          description: >-
            Validation failed - your request was correct, but the tag could not be updated.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: User is not brandzone user and doesn't have tags subscription
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/TagRequest'
        description: request
        required: true

  '/sale/offers/{offerId}/tags':
    post:
      tags:
        - Offer tags
      summary: "Assign tags to an offer"
      description: |
        Use this resource to assign a tag to offer. <a href="../../news/2018-09-24-tagi-zalaczniki/#PrzypiszTagiDoOferty" target="_blank">Read more</a>.
      operationId: assignTagToOfferPOST
      parameters:
        - name: offerId
          in: path
          description: offerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully assigned tag to offer
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: Forbidden - offer is created by someone else or user is not brandzone user or doesn't have tags subscription
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '422':
          description: >-
            Validation failed - your request was correct, but the tag
            could not be assigned.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/TagIdsRequest'
        description: request
        required: true
    get:
      tags:
        - Offer tags
      summary: "Get tags assigned to an offer"
      description: >-
        Use this resource to get a list of tags assigned to offer. <a href="../../news/2018-09-24-tagi-zalaczniki/#PobierzTagiZOferty" target="_blank">Read more</a>.
      operationId: listAssignedOfferTagsGET
      parameters:
        - name: offerId
          in: path
          description: offerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned list of assigned tags
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/TagListResponse'
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: User is not brandzone user and doesn't have tags subscription
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'

  /sale/products:
    get:
      tags:
        - Products
      summary: "Get search products results"
      description: >-
        Use this resource to get a list of products according to provided parameters.
        At least ean or phrase parameter is required. <a href="../../productization/#search" target="_blank">Read more</a>.
      operationId: getSaleProducts
      parameters:
        - name: ean
          in: query
          description: The EAN values can include EAN, ISBN, and UPC identifier types.
          required: false
          schema:
            type: string
            maxLength: 18
        - name: phrase
          in: query
          description: Search phrase.
          required: false
          schema:
            type: string
            maxLength: 1024
        - name: category.id
          in: query
          description: The category identifier to filter results.
          required: false
          schema:
            type: string
        - name: "\"A filter's ID\""
          in: query
          description: >-
            You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id=value.
            When the filter definition looks like:
              ````
              {
                "id": "127448",
                "name": "Kolor",
                "type": "SINGLE",
                "values": [
                  {
                    "name": "biały",
                    "value": "2"
                  },
                  {
                    "name": "czarny",
                    "value": "1" }
                ]
              }
              ````
            You can use 'Kolor' filter to query results, i.e.: 127448=2 (for "biały") or 127448=1 (for "czarny")
          example: 127448=2
          required: false
          schema:
            type: string
        - name: page.id
          in: query
          description: A "cursor" to the next set of results.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/GetSaleProductsResponse'
        '401':
          description: Unauthorized
        '422':
          description: >-
            One of parameters have invalid value.
  '/sale/products/{productId}':
    get:
      tags:
        - Products
      summary: 'Get all data of the particular product'
      description: 'Use this resource to retrieve all data of the particular product. <a href="../../productization/#details" target="_blank">Read more</a>.'
      operationId: getSaleProduct
      parameters:
        - name: productId
          in: path
          description: Product identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product returned successfully
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/SaleProductResponseDto'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  '/account/additional-emails/':
    get:
      tags:
        - Account information
      summary: "Get user's additional emails"
      description: "Use this resource to get a list of all additional email addresses assigned to account."
      operationId: getListOfAdditionalEmailsUsingGET
      responses:
        '200':
          description: List of user's additional emails returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AdditionalEmailsResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
    post:
      tags:
        - Account information
      summary: "Add a new additional email address to user's account"
      description: "Use this resource to add a new additional email address to account."
      operationId: addAdditionalEmailUsingPOST
      responses:
        '201':
          description: Additional email added successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AdditionalEmail'
        '400':
          description: Bad request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
        '422':
          description: Email address provided in the request is not valid
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/AdditionalEmailRequest'
        description: request
        required: true
  '/account/additional-emails/{emailId}':
    get:
      tags:
        - Account information
      summary: "Get information about a particular additional email"
      description: "Use this resource to retrieve a single additional email."
      operationId: getAdditionalEmailUsingGET
      parameters:
        - name: emailId
          in: path
          description: Id of the additional email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Additional email returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AdditionalEmail'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Additional email not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
    delete:
      tags:
        - Account information
      summary: "Delete an additional email address"
      description: "Use this resource to delete one of additional emails"
      operationId: deleteAdditionalEmailUsingDELETE
      parameters:
        - name: emailId
          in: path
          description: Id of the additional email to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted additional email
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Additional email not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'

components:
  securitySchemes:
    bearer-token-for-user:
      type: oauth2
      description: >-
        For more information, see https://developer.allegro.pl/auth/#app to read about authorization code flow
        or https://developer.allegro.pl/auth/#DeviceFlow to read about the device code flow.
      flows:
        authorizationCode:
          authorizationUrl: https://allegro.pl/auth/oauth/authorize
          tokenUrl: https://allegro.pl/auth/oauth/token
          scopes: {}
        x-deviceCode:
          authorizationUrl: https://allegro.pl/skojarz-aplikacje
          tokenUrl: https://allegro.pl/auth/oauth/token
          scopes: {}
    bearer-token-for-application:
      type: oauth2
      description: For more information, see https://developer.allegro.pl/auth/#clientCredentialsFlow
      flows:
        clientCredentials:
          authorizationUrl: ""
          tokenUrl: https://allegro.pl/auth/oauth/token
          scopes: {}
  requestBodies:
    Pos:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/Pos'
      description: Point of service
      required: true
    OfferAttachmentRequest:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/OfferAttachmentRequest'
      description: offer attachment
      required: true
    Offer:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/Offer'
      description: offer
      required: true
    AdditionalServicesGroupRequest:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/AdditionalServicesGroupRequest'
      description: Additional service group body
      required: true
    VariantSetRequest:
      content:
        application/vnd.allegro.beta.v1+json:
          schema:
            $ref: '#/components/schemas/VariantSet'
      required: true
    MessageRequest:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/MessageRequest'
      description: Message request
      required: true
    AttachmentDeclaration:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/AttachmentDeclaration'
      description: A detailed declaration of a file to be uploaded
      required: true
    OfferImageUploadRequest:
      required: true
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/OfferImageLinkUploadRequest'
        image/jpeg:
          schema:
            type: string
            format: binary
            description: File in a binary format
        image/png:
          schema:
            type: string
            format: binary
            description: File in a binary format
        image/gif:
          schema:
            type: string
            format: binary
            description: File in a binary format
  schemas:
    AdditionalServiceDefinitionRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    AdditionalServiceRequest:
      type: object
      required:
        - configurations
        - definition
        - description
      properties:
        definition:
          $ref: '#/components/schemas/AdditionalServiceDefinitionRequest'
        description:
          type: string
          maxLength: 1000
        configurations:
          type: array
          items:
            $ref: '#/components/schemas/Configuration'
    AdditionalServiceResponse:
      type: object
      properties:
        configurations:
          type: array
          items:
            $ref: '#/components/schemas/Configuration'
        definition:
          $ref: '#/components/schemas/BasicDefinitionResponse'
        description:
          type: string
    AdditionalServicesGroup:
      type: object
      properties:
        id:
          type: string
          description: Id of additional service group
    AdditionalServicesGroupRequest:
      type: object
      required:
        - additionalServices
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        additionalServices:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalServiceRequest'
    AdditionalServicesGroupResponse:
      type: object
      properties:
        additionalServices:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalServiceResponse'
        createdAt:
          type: string
          format: date-time
        id:
          type: string
        updatedAt:
          type: string
          format: date-time
        name:
          type: string
        seller:
          $ref: '#/components/schemas/Reference'
    AdditionalServicesGroups:
      type: object
      properties:
        additionalServicesGroups:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalServicesGroupResponse'
    Address:
      type: object
      required:
        - city
        - countryCode
        - state
        - zipCode
      properties:
        street:
          type: string
          maxLength: 80
        city:
          type: string
          maxLength: 40
        zipCode:
          type: string
          maxLength: 10
        state:
          type: string
          maxLength: 40
        countryCode:
          type: string
        coordinates:
          $ref: '#/components/schemas/Coordinates'
    AfterSalesServices:
      type: object
      description: The definitions of the different after sales services assigned to the offer.
      properties:
        impliedWarranty:
          $ref: '#/components/schemas/ImpliedWarranty'
        returnPolicy:
          $ref: '#/components/schemas/ReturnPolicy'
        warranty:
          $ref: '#/components/schemas/Warranty'
    ImpliedWarranty:
      type: object
      description: The implied warranty information.
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the implied warranty definition.
          example: 09f0b4cc-7880-11e9-8f9e-2a86e4085a59
    ReturnPolicy:
      type: object
      description: The return policy information.
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the return policy definition.
          example: 09f0b4cc-7880-11e9-8f9e-2a86e4085a59
    Warranty:
      type: object
      description: The warranty information.
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the warranty definition.
          example: 09f0b4cc-7880-11e9-8f9e-2a86e4085a59
    Answer:
      type: object
      required:
        - createdAt
        - message
      properties:
        createdAt:
          type: string
          format: date-time
          example: '2017-05-17T08:36:57.292+02:00'
          description: Answer creation datetime in ISO 8601 format
        message:
          type: string
          description: Answer message
    AvailableConstraint:
      type: object
      properties:
        type:
          type: string
          description: >-
            One of the type COUNTRY_SAME_QUANTITY or
            COUNTRY_DELIVERY_SAME_QUANTITY
        availableDeliveryMethods:
          type: array
          items:
            type: string
    AverageRates:
      type: object
      properties:
        delivery:
          type: number
          format: double
          example: 4.7
          description: The average value of delivery rate.
          minimum: 0
          maximum: 5
        deliveryCost:
          type: number
          format: double
          example: 5
          description: The average value of delivery cost rate.
          minimum: 0
          maximum: 5
        description:
          type: number
          format: double
          example: 4.5
          description: The average value of description rate.
          minimum: 0
          maximum: 5
        service:
          type: number
          format: double
          example: 4.8
          description: The average value of service rate.
          minimum: 0
          maximum: 5
      description: >-
        The rates broken down into detailed categories. Note that this information is only available if the seller
        has received enough detailed ratings.
    BasicDefinitionResponse:
      type: object
      properties:
        id:
          type: string
    Benefit:
      type: object
      required:
        - specification
      properties:
        specification:
          $ref: '#/components/schemas/BenefitSpecification'
    BenefitSpecification:
      type: object
      required:
        - type
      properties:
        type:
          type: string
    Caption:
      type: object
      required:
        - index
        - value
      properties:
        index:
          type: string
        value:
          type: string
      title: Caption
    CategoriesDto:
      type: object
      description: The list of categories.
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryDto'
    Category:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    CategoryDto:
      type: object
      properties:
        id:
          type: string
          description: >-
            The ID of the category. This can be either in UUID format or an integer format. You should be ready to
            accept any string value as the category ID.
          example: "12"
        leaf:
          type: boolean
          description: Indicates wheter the category is at the lowest level. Leaf categories do not have any children. Offers can be listed only in leaf categories.
        name:
          type: string
          description: Name of the category in Polish.
          example: Pozostałe
        options:
          $ref: '#/components/schemas/CategoryOptionsDto'
        parent:
          type: object
          properties:
            id:
              type: string
              description: The ID of the parent category.
              example: "709"
          description: The parent category data.
      description: The category data.
    CategoryOptionsDto:
      type: object
      properties:
        advertisement:
          type: boolean
          description: Indicates whether offers of type ADVERTISEMENT can be listed in this category.
        advertisementPriceOptional:
          type: boolean
          description: >-
            Indicates whether advertisements listed in this category must have a price given. If the value is `true`
            then you don't have to provide a price when listing an advertisement in this category.
        variantsByColorPatternAllowed:
          type: boolean
          description: >-
            Indicates whether you can combine offers from this category into variant sets based on the color and
            pattern.
        offersWithProductPublicationEnabled:
          type: boolean
          description: Information whether the category supports assigning offers to a product.
      description: A list of the different options which can be used with this category.
    Cells:
      type: object
      required:
        - cells
      properties:
        cells:
          type: array
          items:
            type: string
      title: Cells
    ChangePrice:
      type: object
      required:
        - input
      properties:
        id:
          type: string
          format: uuid
          description: The unique command id provided in the input.
          example: "6365996a-6cae-11e9-a923-1681be663d3e"
        input:
          $ref: '#/components/schemas/ChangePriceInput'
        output:
          $ref: '#/components/schemas/CommandOutput'
    ChangePriceInput:
      type: object
      required:
        - buyNowPrice
      properties:
        buyNowPrice:
          $ref: '#/components/schemas/Price'
      description: The input of the command, i.e. the new Buy Now price for the offer.
    ChangePriceWithoutOutput:
      type: object
      required:
        - input
      properties:
        id:
          type: string
          format: uuid
          description: The unique command id generated by you. This should be the same UUID as used in the path.
          example: "6365996a-6cae-11e9-a923-1681be663d3e"
        input:
          $ref: '#/components/schemas/ChangePriceInput'
    CommandOutput:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ProcessingStatus'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      description: The output of the command.
    CommandTask:
      type: object
      properties:
        field:
          type: string
          description: Modified field as JSON path
        finishedAt:
          type: string
          format: date-time
          description: >-
            Date of completion of the modification. Format (ISO 8601) -
            yyyy-MM-dd'T'HH:mm:ss.SSSZ
        message:
          type: string
          description: Fail reason description
        offer:
          description: Offer identifier
          $ref: '#/components/schemas/OfferId'
        scheduledAt:
          type: string
          format: date-time
          description: >-
            Date of the modification schedule. Format (ISO 8601) -
            yyyy-MM-dd'T'HH:mm:ss.SSSZ
        status:
          type: string
          description: 'Available statuses: NEW, SUCCESS, FAIL'
      description: Status of single command task
    CompatibilityList:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          maxItems: 2000
          items:
            $ref: '#/components/schemas/CompatibilityListItem'
      description: List of items compatible with offer
    CompatibilityListItem:
      type: object
      properties:
        text:
          type: string
          maxLength: 200
          description: 'text representation of compatible item'
      description: Item compatible with offer
    Configuration:
      type: object
      properties:
        constraints:
          $ref: '#/components/schemas/ConstraintCriteria'
        price:
          $ref: '#/components/schemas/Price'
    ConstraintCriteria:
      type: object
      properties:
        country:
          type: string
        type:
          type: string
          enum:
            - COUNTRY_SAME_QUANTITY
            - COUNTRY_DELIVERY_SAME_QUANTITY
        deliveryMethods:
          type: array
          items:
            $ref: '#/components/schemas/JustId'
    ContactRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 250
        emails:
          type: array
          maxItems: 1
          items:
            $ref: '#/components/schemas/EmailRequest'
        phones:
          type: array
          maxItems: 2
          items:
            $ref: '#/components/schemas/PhonesRequest'
    ContactResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        emails:
          type: array
          items:
            $ref: '#/components/schemas/EmailResponse'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/PhonesResponse'
    ContactResponseList:
      type: object
      properties:
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ContactResponse'
    Coordinates:
      type: object
      required:
        - lat
        - lon
      properties:
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
    DefinitionsResponse:
      type: object
      properties:
        definitions:
          type: array
          items:
            $ref: '#/components/schemas/FullDefinitionResponse'
    Delivery:
      type: object
      properties:
        additionalInfo:
          type: string
          maxLength: 650
        handlingTime:
          type: string
          example: PDT12H30M5S
          description: 'Handling time, ISO 8601 duration format'
        shipmentDate:
          type: string
          format: date-time
          example: '2018-04-01T08:00:00Z'
          description: 'Shipment date, Format (ISO 8601) - yyyy-MM-dd''T''HH:mm:ss.SSSZ'
        shippingRates:
          $ref: '#/components/schemas/JustId'
    DescriptionSection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DescriptionSectionItem'
    DescriptionSectionItem:
      type: object
      description: 'One of: TextItem, ImageItem'
      properties:
        type:
          type: string
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          TEXT: '#/components/schemas/DescriptionSectionItemText'
          IMAGE: '#/components/schemas/DescriptionSectionItemImage'
    DescriptionSectionItemText:
      allOf:
        - $ref: '#/components/schemas/DescriptionSectionItem'
        - type: object
          properties:
            type:
              type: string
              default: 'TEXT'
            content:
              type: string
    DescriptionSectionItemImage:
      allOf:
        - $ref: '#/components/schemas/DescriptionSectionItem'
        - type: object
          properties:
            type:
              type: string
              default: 'IMAGE'
            url:
              type: string
    EmailRequest:
      type: object
      properties:
        address:
          type: string
          maxLength: 128
          description: The contact's email address. The user part (before `@`) cannot be longer than 64 characters.
    EmailResponse:
      type: object
      properties:
        address:
          type: string
    Error:
      type: object
      properties:
        code:
          type: string
          description: The error code. You can use this code when contacting us about any problems with our systems.
          example: "NotAcceptableException"
        details:
          type: string
          description: >-
            For some cases, this field provides more details regarding the error. This field can be empty.
          example: null
        message:
          type: string
          description: >-
            A message directed to the developer of the program. This message will always be in English and give you
            some more technical details on what exactly has happened.
          example: Not acceptable representation requested. Please check 'Accept' request header
        path:
          type: string
          description: >-
            This field will point to a specific field in object if the error is connected to a problem with such specific
            field. This field can be empty
          example: null
        userMessage:
          type: string
          description: >-
            The message that can be presented directly to your user. It will not contain any technical information. This
            message is translated based on the value of the "Accept-Language" header. By default message in English is
            returned.
          example: The request contains incorrect data. Contact the author of the application.
    Errors:
      type: array
      description: The list of all the error objects explaining the error.
      items:
        $ref: '#/components/schemas/Error'
    ErrorsHolder:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/Errors'
      title: ErrorsHolder
    Fee:
      type: object
      properties:
        amount:
          type: string
        currency:
          type: string
      title: Fee
    FullDefinitionResponse:
      type: object
      properties:
        availableConstraints:
          type: array
          items:
            $ref: '#/components/schemas/AvailableConstraint'
        description:
          type: string
        id:
          type: string
        name:
          type: string
        updatedAt:
          type: string
          format: date-time
    FeePreviewResponse:
      type: object
      properties:
        commissions:
          type: array
          description: 'An array of commissions.'
          items:
            $ref: '#/components/schemas/CommissionResponse'
        quotes:
          type: array
          description: 'An array of quotes.'
          items:
            $ref: '#/components/schemas/QuoteResponse'
    CommissionResponse:
      properties:
        name:
          type: string
          description: 'Commission fee name.'
          example: 'Prowizja od sprzedaży'
        fee:
          type: object
          $ref: '#/components/schemas/Price'
    QuoteResponse:
      type: object
      properties:
        name:
          type: string
          description: 'Quote fee name.'
          example: 'Opłata za wystawienie.'
        fee:
          type: object
          $ref: '#/components/schemas/Price'
        cycleDuration:
          type: string
          description: 'Duration in ISO 8601 format.'
          example: 'PT240H'
        classifiedsPackage:
          type: object
          $ref: '#/components/schemas/ClassifiedPackage'
    GeneralReport:
      type: object
      properties:
        id:
          type: string
          description: Command ID
        taskCount:
          description: Tasks information
          $ref: '#/components/schemas/TaskCount'
      description: Command execution summary
    Header:
      type: object
      required:
        - name
      properties:
        name:
          type: string
      title: Header
    ImageUrl:
      type: object
      properties:
        url:
          type: string
      description: Image url
    ImpliedWarrantyBasic:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    JustId:
      type: object
      properties:
        id:
          type: string
    ExternalId:
      type: object
      description: The information on the offer in an external system.
      properties:
        id:
          type: string
          maxLength: 100
          description: The ID of the offer in the external system.
          example: "AH-129834"
    Location:
      type: object
      properties:
        city:
          type: string
          maxLength: 50
        countryCode:
          type: string
        postCode:
          type: string
        province:
          type: string
          maxLength: 50
    Modification:
      type: object
      properties:
        additionalServicesGroup:
          description: AdditionalServicesGroup modification
          $ref: '#/components/schemas/AdditionalServicesGroup'
        delivery:
          $ref: '#/components/schemas/ModificationDelivery'
        payments:
          description: Payments modification
          $ref: '#/components/schemas/ModificationPayments'
        promotion:
          description: Promotion modification
          $ref: '#/components/schemas/ModificationPromotion'
        sizeTable:
          description: SizeTable modification
          $ref: '#/components/schemas/ModificationSizeTable'
      description: Contains fields to change
    ModificationDelivery:
      type: object
      properties:
        shippingRates:
          $ref: '#/components/schemas/ShippingRates'
      description: Contains shipping rates to change
    ModificationPayments:
      type: object
      properties:
        invoice:
          type: string
          description: 'Invoice type: VAT, VAT_MARGIN, WITHOUT_VAT, NO_INVOICE'
          enum:
            - VAT
            - VAT_MARGIN
            - WITHOUT_VAT
            - NO_INVOICE
    ModificationPromotion:
      type: object
      properties:
        bold:
          type: boolean
          example: false
          description: 'Bold flag: true, false, null'
        departmentPage:
          type: boolean
          example: false
          description: 'DepartmentPage flag: true, false, null'
        emphasized:
          type: boolean
          example: false
          description: 'Emphasized flag: true, false, null'
        emphasizedHighlightBoldPackage:
          type: boolean
          example: false
          description: 'EmphasizedHighlightBoldPackage flag: true, false, null'
        highlight:
          type: boolean
          example: false
          description: 'Highlight flag: true, false, null'
    ModificationSizeTable:
      type: object
      properties:
        id:
          type: string
          description: Id of size table
    OfferAttachment:
      type: object
      properties:
        id:
          type: string
          maxLength: 64
        type:
          $ref: '#/components/schemas/AttachmentType'
        file:
          $ref: '#/components/schemas/AttachmentFile'
    PublicOfferPreviewRequest:
      properties:
        offer:
          $ref: '#/components/schemas/Offer'
        classifiedsPackages:
          $ref: '#/components/schemas/ClassifiedsPackages'
    ClassifiedsPackages:
      type: object
      properties:
        basePackage:
          $ref: '#/components/schemas/ClassifiedPackage'
        extraPackages:
          type: array
          description: 'An array of extra packages.'
          items:
            $ref: '#/components/schemas/ClassifiedPackage'
    ClassifiedPackage:
      type: object
      properties:
        id:
          type: string
          description: 'The classifieds package ID.'
          example: 'e76d443b-c088-4da5-95f7-cc9aaf73bf7b'
    OfferAttachmentRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AttachmentType'
        file:
          $ref: '#/components/schemas/AttachmentFileRequest'
    AttachmentType:
      type: string
      description: offer attachment type
      enum:
        - MANUAL
        - SPECIAL_OFFER_RULES
        - COMPETITION_RULES
        - BOOK_EXCERPT
        - USER_MANUAL
        - INSTALLATION_INSTRUCTIONS
        - GAME_INSTRUCTIONS
    AttachmentFile:
      type: object
      properties:
        name:
          type: string
          maxLength: 200
        url:
          type: string
          maxLength: 200
    AttachmentFileRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 200
    OfferImageLinkUploadRequest:
      type: object
      required:
        - url
      properties:
        url:
          type: string
    OfferImageUploadResponse:
      type: object
      properties:
        expiresAt:
          type: string
          format: date-time
          description: >-
            Date of file expiration (removal from the server).
            We will remove it unless you use it in your offer.
        location:
          type: string
          description: Link to the uploaded image
    Offer:
      type: object
      required:
        - name
      properties:
        additionalServices:
          $ref: '#/components/schemas/JustId'
        afterSalesServices:
          $ref: '#/components/schemas/AfterSalesServices'
        category:
          $ref: '#/components/schemas/Category'
        compatibilityList:
          $ref: '#/components/schemas/CompatibilityList'
        contact:
          $ref: '#/components/schemas/JustId'
        createdAt:
          type: string
          format: date-time
          description: >-
            Creation date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ.
            Cannot be modified
        delivery:
          $ref: '#/components/schemas/Delivery'
        description:
          $ref: '#/components/schemas/OfferDescription'
        ean:
          type: string
          maxLength: 18
        external:
          $ref: '#/components/schemas/ExternalId'
        id:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageUrl'
        location:
          $ref: '#/components/schemas/Location'
        name:
          type: string
          description: Name of the offer. Words used in the name field cannot be longer than 30 characters.
          maxLength: 50
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        payments:
          $ref: '#/components/schemas/Payments'
        product:
          $ref: '#/components/schemas/JustId'
        promotion:
          $ref: '#/components/schemas/Promotion'
        publication:
          $ref: '#/components/schemas/Publication'
        sellingMode:
          $ref: '#/components/schemas/SellingMode'
        sizeTable:
          $ref: '#/components/schemas/JustId'
        stock:
          $ref: '#/components/schemas/Stock'
        updatedAt:
          type: string
          format: date-time
          description: >-
            Last update date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ.
            Cannot be modified
        validation:
          $ref: '#/components/schemas/Validation'
      description: Single offer data
    OfferChangeCommand:
      type: object
      properties:
        modification:
          description: Fields to change
          $ref: '#/components/schemas/Modification'
        offerCriteria:
          type: array
          description: List of offer criteria
          items:
            $ref: '#/components/schemas/OfferCriterium'
      description: Modification command payload
    OfferPriceChangeCommand:
      type: object
      properties:
        modification:
          $ref: '#/components/schemas/PriceModification'
        offerCriteria:
          type: array
          description: List of offer criteria
          items:
            $ref: '#/components/schemas/OfferCriterium'
      description: Price modification command payload
    PriceModification:
      type: object
      description: >-
        The way the offer price should be changed. One of three ways is possible:
        new price, increase/decrease price, percentage change and only one can be chosen at once.
      properties:
        type:
          description: modification type
          type: string
          enum:
            - 'FIXED_PRICE'
            - 'INCREASE_PRICE'
            - 'DECREASE_PRICE'
            - 'INCREASE_PERCENTAGE'
            - 'DECREASE_PERCENTAGE'
        price:
          $ref: '#/components/schemas/PriceModification.FixedPrice'
        value:
          $ref: '#/components/schemas/PriceModification.ValueChange'
        percentage:
          type: string
          description: 'Percentage change of offer buy now price, related to types: INCREASE_PERCENTAGE, DECREASE_PERCENTAGE'
    PriceModification.FixedPrice:
      type: object
      description: New offer buy now price, related to type FIXED_PRICE
      properties:
        amount:
          type: string
        currency:
          type: string
    PriceModification.ValueChange:
      type: object
      description: 'Change of offer buy now price, related to types: INCREASE_PRICE, DECREASE_PRICE'
      properties:
        amount:
          type: string
        currency:
          type: string
    OfferQuantityChangeCommand:
      type: object
      properties:
        modification:
          $ref: '#/components/schemas/QuantityModification'
        offerCriteria:
          type: array
          description: List of offer criteria
          items:
            $ref: '#/components/schemas/OfferCriterium'
      description: Quantity modification command payload
    QuantityModification:
      type: object
      description: >-
        The way the offer quantity should be changed. One of two ways is possible:
        new quantity, increase/decrease quantity and only one can be chosen at once.
      properties:
        changeType:
          description: modification type
          type: string
          enum:
            - 'FIXED'
            - 'GAIN'
        value:
          type: integer
    OfferCriterion:
      type: object
      required:
        - type
      properties:
        type:
          type: string
    OfferCriterium:
      type: object
      properties:
        offers:
          type: array
          description: Set of offers
          items:
            $ref: '#/components/schemas/OfferId'
        type:
          type: string
          description: 'Criteria type: CONTAINS_OFFERS'
          enum:
            - CONTAINS_OFFERS
      description: Contains offers criteria
    OfferDescription:
      type: object
      description: The description section cannot have more than 40000 bytes in length.
      properties:
        sections:
          type: array
          items:
            $ref: '#/components/schemas/DescriptionSection'
    OfferId:
      type: object
      properties:
        id:
          type: string
          description: Offer id
    OfferQuoteDto:
      type: object
      properties:
        enabled:
          type: boolean
        fee:
          $ref: '#/components/schemas/Fee'
        name:
          type: string
        nextDate:
          type: string
          format: date-time
        offer:
          $ref: '#/components/schemas/Offer'
        type:
          type: string
      title: OfferQuoteDto
    OfferQuotesDto:
      type: object
      properties:
        count:
          type: integer
          format: int32
        quotes:
          type: array
          items:
            $ref: '#/components/schemas/OfferQuoteDto'
      title: OfferQuotesDto
    OpenHour:
      type: object
      required:
        - dayOfWeek
        - from
        - to
      properties:
        dayOfWeek:
          type: string
          description: >-
            Days of the week: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY,
            SATURDAY, SUNDAY. Date format ISO 8601
        from:
          type: string
          description: 'Date format (ISO 8601) - HH:mm:ss.SSS'
        to:
          type: string
          description: 'Date format (ISO 8601) - HH:mm:ss.SSS'
    Order:
      type: object
      required:
        - id
        - offers
      properties:
        id:
          type: string
          description: Order id
        offers:
          type: array
          description: List of order offers
          items:
            $ref: '#/components/schemas/Offer'
    Parameter:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        rangeValue:
          $ref: '#/components/schemas/ParameterRangeValue'
        values:
          type: array
          items:
            type: string
        valuesIds:
          type: array
          items:
            type: string
      description: Offer's parameter
    CategoryParameter:
      type: object
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          integer: '#/components/schemas/IntegerCategoryParameter'
          float: '#/components/schemas/FloatCategoryParameter'
          string: '#/components/schemas/StringCategoryParameter'
          dictionary: '#/components/schemas/DictionaryCategoryParameter'
      properties:
        id:
          type: string
          description: The ID of the parameter.
          example: "11323"
        name:
          type: string
          description: The name of the parameter in Polish.
          example: "Stan"
        type:
          type: string
          description: >-
            The type of the parameter. Other fields in this structure may appear based on the type of the parameter.
          enum:
            - integer
            - float
            - string
            - dictionary
        required:
          type: boolean
          description: >-
            Indicates whether the value of this parameter must be set in an offer. Offers without required parameters
            set cannot be published.
        unit:
          type: string
          description: The unit in which values of the parameter are used. May be `null`.
          example: "kg"
        options:
          $ref: '#/components/schemas/CategoryParameterOptions'
    CategoryParameterOptions:
      type: object
      properties:
        variantsAllowed:
          type: boolean
          description: Parameters with this option enabled can be used for offer variants creation.
        variantsEqual:
          type: boolean
          description: All offer variants must have the same values in parameters with this option enabled.
      description: A list of the different options which can be used with this parameter.
    DictionaryCategoryParameter:
      allOf:
        - $ref: '#/components/schemas/CategoryParameter'
        - type: object
          properties:
            type:
              type: string
              default: dictionary
            restrictions:
              type: object
              description: The restrictions of values for this parameter.
              properties:
                multipleChoices:
                  type: boolean
                  description: Indicates whether this parameter can have more than one value.
            dictionary:
              type: array
              description: Defines the values that this parameter can accept.
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: >-
                      The ID of the dictionary value. This should be used when setting parameters in an offer.
                    example: "11323_1"
                  value:
                    type: string
                    description: The label of the dictionary value in Polish.
                    example: "Nowy"
    IntegerCategoryParameter:
      allOf:
        - $ref: '#/components/schemas/CategoryParameter'
        - type: object
          properties:
            type:
              type: string
              default: integer
            restrictions:
              type: object
              description: The restrictions of values for this parameter.
              properties:
                min:
                  type: integer
                  description: The minimum value of this parameter.
                  example: 8
                max:
                  type: integer
                  description: The maximum value of this parameter.
                  example: 128
                range:
                  type: boolean
                  description: >-
                    Indicates whether this is a range parameter. If this is `true`, then you have to provide two values
                    for this parameter - `from` and `to`. Both these values have to be between the `min` and `max`.
    FloatCategoryParameter:
      allOf:
        - $ref: '#/components/schemas/CategoryParameter'
        - type: object
          properties:
            type:
              type: string
              default: float
            restrictions:
              type: object
              description: The restrictions of values for this parameter.
              properties:
                min:
                  type: number
                  description: The minimum value of this parameter.
                  example: 0.0
                max:
                  type: number
                  description: The maximum value of this parameter.
                  example: 10000.0
                range:
                  type: boolean
                  description: >-
                    Indicates whether this is a range parameter. If this is `true`, then you have to provide two values
                    for this parameter - `from` and `to`. Both these values have to be between the `min` and `max`.
                precision:
                  type: integer
                  description: Indicates what precision you can use when providing float values.
                  example: 3
    StringCategoryParameter:
      allOf:
        - $ref: '#/components/schemas/CategoryParameter'
        - type: object
          properties:
            type:
              type: string
              default: string
            restrictions:
              type: object
              description: The restrictions of values for this parameter.
              properties:
                minLength:
                  type: integer
                  description: The minimum length of the parameter value.
                  example: 3
                maxLength:
                  type: integer
                  description: The maximum length of the parameter value.
                  example: 250
                allowedNumberOfValues:
                  type: integer
                  description: Indicates how many different values can be provided for this parameter.
                  example: 5
    ParameterRangeValue:
      type: object
      required:
        - from
        - to
      properties:
        from:
          type: string
        to:
          type: string
      description: Parameter's range value
    CategoryParameterList:
      type: object
      properties:
        parameters:
          type: array
          description: The list of parameters supported by the category.
          items:
            $ref: '#/components/schemas/CategoryParameter'
    Payment:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          description: 'Available forms of payment: CASH - cash, CARD - card.'
    Payments:
      type: object
      properties:
        invoice:
          type: string
          description: 'Invoice type, one of: VAT, VAT_MARGIN, WITHOUT_VAT, NO_INVOICE'
    PhonesRequest:
      type: object
      properties:
        number:
          type: string
          maxLength: 250
          description: A valid phone number
    PhonesResponse:
      type: object
      properties:
        number:
          type: string
    Pos:
      type: object
      required:
        - address
        - confirmationType
        - name
        - openHours
        - status
        - type
      properties:
        id:
          type: string
          description: >-
            UUID. When creating a point of service (Post) the field is ignored.
            It is required when updating (Put) a point of service.
        externalId:
          type: string
          description: ID from external client system.
          maxLength: 80
        name:
          type: string
          maxLength: 80
        seller:
          $ref: '#/components/schemas/Seller'
        type:
          type: string
          description: Indicates point type. The only valid value so far is PICKUP_POINT.
        address:
          $ref: '#/components/schemas/Address'
        phoneNumber:
          type: string
          maxLength: 16
        email:
          type: string
          maxLength: 64
        openHours:
          type: array
          description: Possible empty list of opening hours.
          items:
            $ref: '#/components/schemas/OpenHour'
        serviceTime:
          type: string
          description: >-
            Delivery time / Time period for receipt. Date format ISO 8601 e.g.
            'PT24H'
        payments:
          type: array
          description: An empty list of payment types is available.
          items:
            $ref: '#/components/schemas/Payment'
        confirmationType:
          type: string
          description: >-
            Confirmation method: AWAIT_CONTACT - We will inform you about the
            time of receipt, CALL_US - Please make an appointment,
            CONTACT_NOT_REQUIRED - Contact is not required.
        status:
          type: string
          description: >-
            Point of service status: ACTIVE - active, TEMPORARILY_CLOSED -
            temporarily closed, CLOSED_DOWN - closed down, DELETED - deleted.
        createdAt:
          type: string
          description: >-
            Creation date. Date format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ
            When creating (Post) or updating (Put) a point of service (Post) the field is ignored.
        updatedAt:
          type: string
          description: >-
            Modification date. Date format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ
            When creating (Post) or updating (Put) a point of service (Post) the field is ignored.
    Price:
      type: object
      description: The price data.
      required:
        - amount
        - currency
      properties:
        amount:
          type: string
          description: The amount provided in a string format to avoid rounding errors.
          example: '123.45'
        currency:
          type: string
          format: ISO 4217
          description: The currency provided as a 3-letter code from ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
          example: 'PLN'
    ProcessingStatus:
      type: string
      description: The processing status of the command.
      enum:
        - QUEUEING
        - RUNNING
        - VALIDATED_AND_RUNNING
        - RUNNING_BUT_WITH_ERRORS
        - SUCCESSFUL
        - PARTIAL_SUCCESS
        - ERROR
    Promotion:
      type: object
      properties:
        bold:
          type: boolean
        departmentPage:
          type: boolean
        emphasized:
          type: boolean
        emphasizedHighlightBoldPackage:
          type: boolean
        highlight:
          type: boolean
    PublicTableDto:
      type: object
      required:
        - headers
        - name
        - orientation
        - values
      properties:
        headers:
          type: array
          items:
            $ref: '#/components/schemas/Header'
        id:
          type: string
        image:
          $ref: '#/components/schemas/PublicTableImageDto'
        name:
          type: string
        orientation:
          type: string
          enum:
            - HORIZONTAL
            - VERTICAL
        values:
          type: array
          items:
            $ref: '#/components/schemas/Cells'
      title: PublicTableDto
    PublicTableImageDto:
      type: object
      required:
        - captions
        - url
      properties:
        captions:
          type: array
          items:
            $ref: '#/components/schemas/Caption'
        url:
          type: string
      title: PublicTableImageDto
    PublicTablesDto:
      type: object
      required:
        - tables
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/PublicTableDto'
      title: PublicTablesDto
    Publication:
      type: object
      properties:
        duration:
          type: string
          example: PDT12H30M5S
          description: 'Publication duration, ISO 8601 duration format'
        endingAt:
          type: string
          format: date-time
          description: >-
            Publication ending date: Format (ISO 8601) -
            yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified
        startingAt:
          type: string
          format: date-time
          description: >-
            Publication starting date: Format (ISO 8601) -
            yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified
        status:
          $ref: '#/components/schemas/OfferStatus'
        endedBy:
          type: string
          enum:
            - USER
            - ADMIN
            - EXPIRATION
            - ERROR
          description: >
            The types of ended by can be as follows:</br>
            - `USER` - offer ended by user.</br>
            - `ADMIN` - offer ended by admin.</br>
            - `EXPIRATION` - offer ended due to available items had sold out or offer duration had expired (valid for offers with specified duration).</br>
            - `ERROR` - offer ended due to internal problem with offer publication. The publication command responded with success status, but further processing failed.
    PublicationChangeCommandDto:
      type: object
      properties:
        offerCriteria:
          type: array
          description: List of offer criteria
          items:
            $ref: '#/components/schemas/OfferCriterium'
        publication:
          description: Fields to change
          $ref: '#/components/schemas/Publication_modification'
      description: Publication modification command payload
    Rates:
      type: object
      required:
        - delivery
        - deliveryCost
        - description
        - service
      properties:
        delivery:
          type: integer
          format: int32
          example: 5
          description: Delivery rate value
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        deliveryCost:
          type: integer
          format: int32
          example: 5
          description: Delivery cost rate value
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        description:
          type: integer
          format: int32
          example: 5
          description: Description rate value
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        service:
          type: integer
          format: int32
          example: 5
          description: Service rate value
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
    Reference:
      type: object
      properties:
        id:
          type: string
    Removal:
      type: object
      required:
        - possibleTo
      properties:
        possibleTo:
          type: string
          format: date-time
          example: '2017-05-17T08:36:57.292+02:00'
          description: Date until a removal request can be submitted in ISO 8601 format
        request:
          description: 'Submitted removal request, null if removal was not requested'
          $ref: '#/components/schemas/RemovalRequest'
    RemovalRequest:
      type: object
      required:
        - createdAt
        - message
      properties:
        createdAt:
          type: string
          format: date-time
          example: '2017-05-17T08:36:57.292+02:00'
          description: Removal request creation datetime in ISO 8601 format
        message:
          type: string
          description: Message containing explanation for removing rating
    ReturnPolicyBasic:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    SearchResult:
      properties:
        posList:
          type: array
          items:
            $ref: '#/components/schemas/Pos'
    Seller:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    SellerCreateRebateRequestDto:
      type: object
      required:
        - benefits
        - offerCriteria
      properties:
        benefits:
          type: array
          items:
            $ref: '#/components/schemas/Benefit'
        offerCriteria:
          type: array
          items:
            $ref: '#/components/schemas/OfferCriterion'
    SellerRebateDto:
      type: object
      required:
        - benefits
        - id
        - offerCriteria
        - status
      properties:
        benefits:
          type: array
          items:
            $ref: '#/components/schemas/Benefit'
        createdAt:
          type: string
        id:
          type: string
        offerCriteria:
          type: array
          items:
            $ref: '#/components/schemas/OfferCriterion'
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - SUSPENDED
    SellerRebatesDto:
      type: object
      required:
        - promotions
        - totalCount
      properties:
        promotions:
          type: array
          items:
            $ref: '#/components/schemas/SellerRebateDto'
        totalCount:
          type: integer
          format: int64
    SellingMode:
      type: object
      properties:
        format:
          $ref: '#/components/schemas/SellingModeFormat'
        minimalPrice:
          $ref: '#/components/schemas/Price'
        price:
          $ref: '#/components/schemas/Price'
        startingPrice:
          $ref: '#/components/schemas/Price'
      description: Offer's selling mode
    ShippingRate:
      type: object
      properties:
        deliveryMethod:
          type: object
          properties:
            id:
              type: string
              description: ID of the delivery method
        maxQuantityPerPackage:
          type: integer
          description: >-
            Maximum quantity per package for the given delivery
            method. Minimum value is 1.
          minimum: 1
        firstItemRate:
          type: object
          description: >-
            Rate for the first item in the parcel for the given
            delivery method
          properties:
            amount:
              type: string
              description: Amount
            currency:
              type: string
              description: ISO 4217 currency code
        nextItemRate:
          type: object
          description: >-
            Rate for every other item, after the first, in the
            same parcel for the given delivery method
          properties:
            amount:
              type: string
              description: Amount
            currency:
              type: string
              description: ISO 4217 currency code
        shippingTime:
          type: object
          description: >-
            Custom shipping time for the given delivery method (if the method allows a custom shipping time).
            If not set the default shipping time for the method is used.
          properties:
            from:
              type: string
              description: 'ISO 8601 duration format, e.g. P3D for 3 days'
            to:
              type: string
              description: 'ISO 8601 duration format, e.g. P3D for 3 days'
      required:
        - deliveryMethod
        - firstItemRate
        - maxQuantityPerPackage
        - nextItemRate
    ShippingRates:
      type: object
      properties:
        id:
          type: string
          description: Id of shipping rates
    ShippingRatesSet:
      type: object
      properties:
        id:
          type: string
          description: >-
            Shipping rates set ID (UUID)
            When creating a shipping rates set (Post) the field is ignored.
            It is required when updating (Put) a shipping rates.
        name:
          type: string
          minLength: 1
          maxLength: 64
          description: User defined name of the shipping rates set
        rates:
          type: array
          items:
            $ref: '#/components/schemas/ShippingRate'
        lastModified:
          type: string
          description: >-
            Date and time of the last modification of the set in UTC
            ISO 8601 format.
            When creating (Post) or updating (Put) a shipping rates set the field is ignored.
      required:
        - rates
    Stock:
      type: object
      properties:
        available:
          type: integer
          format: int32
        unit:
          type: string
          description: 'Stock unit, one of: UNIT, PAIR, SET'
    TaskCount:
      type: object
      properties:
        failed:
          type: integer
          format: int32
          description: Current number of failed offers updates
        success:
          type: integer
          format: int32
          description: Current number of success offers updates
        total:
          type: integer
          format: int32
          description: Total number of scheduled offers updates
      description: Offers updates summary
    TaskReport:
      type: object
      properties:
        tasks:
          type: array
          description: List of task results
          items:
            $ref: '#/components/schemas/CommandTask'
      description: Contains list of task results
    UUID:
      type: string
      format: uuid
      description: >-
        Universally Unique Identifier (UUID) generated by you that can be used
        to enforce idempotency. UUID specification:
        http://www.ietf.org/rfc/rfc4122.txt
    User:
      type: object
      required:
        - id
        - login
      properties:
        id:
          type: string
          description: Buyer id
        login:
          type: string
          description: Buyer's login
    UserRating:
      type: object
      required:
        - buyer
        - comment
        - createdAt
        - id
        - recommended
      properties:
        answer:
          description: 'Seller''s answer, if null seller did not publish answer'
          $ref: '#/components/schemas/Answer'
        buyer:
          description: Buyer who created rating
          $ref: '#/components/schemas/User'
        comment:
          type: string
          description: Buyer's text comment
        createdAt:
          type: string
          format: date-time
          example: '2017-05-17T08:36:57.292+02:00'
          description: Creation datetime in ISO 8601 format
        excludedFromAverageRates:
          type: boolean
          example: false
          description: >-
            If true this rating was not included in calculating average user
            rates
        id:
          type: string
          description: Rating id
        order:
          description: Rated order
          $ref: '#/components/schemas/Order'
        rates:
          description: Given rates
          $ref: '#/components/schemas/Rates'
        recommended:
          type: boolean
          example: false
          description: Whether buyer recommends the order
        removal:
          description: Data regarding removal of rating
          $ref: '#/components/schemas/Removal'
    UserRatingListResponse:
      type: object
      required:
        - ratings
      properties:
        ratings:
          type: array
          description: >-
            List of ratings that match requested filter. Empty when no rating
            matched.
          items:
            $ref: '#/components/schemas/UserRating'
    UserRatingSummaryResponse:
      type: object
      required:
        - notRecommended
        - recommended
        - recommendedPercentage
      properties:
        averageRates:
          $ref: '#/components/schemas/AverageRates'
        notRecommended:
          description: Summary of data concerning users that do not recommend the seller.
          type: object
          required:
            - total
            - unique
          properties:
            total:
              type: integer
              format: int64
              example: 100
              description: Total number of negative feedbacks received.
            unique:
              type: integer
              format: int64
              example: 80
              description: Number of unique users.
        recommended:
          description: Summary of data concerning users that recommend the seller.
          type: object
          required:
            - total
            - unique
          properties:
            total:
              type: integer
              format: int64
              example: 100
              description: Total number of positive feedbacks received.
            unique:
              type: integer
              format: int64
              example: 75
              description: Number of unique users.
        recommendedPercentage:
          type: string
          example: '99,8'
          description: Percentage of unique buyers recommending the seller.
    Validation:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        validatedAt:
          type: string
          format: date-time
    ValidationError:
      type: object
      properties:
        code:
          type: string
        details:
          type: string
        message:
          type: string
        path:
          type: string
        userMessage:
          type: string
    WarrantyBasic:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Describes_listing_fee:
      type: object
      required:
        - fee
        - name
        - type
        - cycleDuration
      properties:
        fee:
          $ref: '#/components/schemas/Fee'
        name:
          type: string
        type:
          type: string
        cycleDuration:
          type: string
          example: "PT240H"
          description: Pricing cycle duration, ISO 8601 duration format
    Describes_success_commission_fee:
      type: object
      required:
        - fee
        - name
        - type
      properties:
        fee:
          $ref: '#/components/schemas/Fee'
        name:
          type: string
        type:
          type: string
    ImpliedWarrantiesList_ImpliedWarrantyBasic_:
      type: object
      properties:
        count:
          type: integer
          format: int32
        impliedWarranties:
          type: array
          items:
            $ref: '#/components/schemas/ImpliedWarrantyBasic'
    ParametersForPreviewPrice:
      type: object
      required:
        - category
        - unitPrice
      properties:
        category:
          description: Leaf category id
          $ref: '#/components/schemas/Category'
        condition:
          type: string
          description: 'Offer condition, if is new, used or other.'
          enum:
            - NEW
            - USED
            - OTHER
        duration:
          type: string
          enum:
            - PT72H
            - PT120H
            - PT168H
            - PT240H
            - PT336H
            - PT480H
            - PT720H
        hasAnyQuantity:
          type: boolean
        numberOfBigPhotos:
          type: integer
          format: int32
          description: 'If set, minimum value 0'
        numberOfPhotos:
          type: integer
          format: int32
          description: 'If set, minimum value 0'
        quantity:
          type: integer
          format: int32
          description: 'Quantity of items to be sold. If set, minimum value 1'
        shop:
          type: boolean
          example: false
          description: >-
            Deprecated. Value 'true' sets the 'offer.type' field to 'shop',
            value 'false' to 'offer'. This field is ignored if 'offer.type'
            field is set.
        soldQuantity:
          type: integer
          format: int32
          description: >-
            Quantity of sold items. Relates to commission success fee. If set,
            minimum value 1
        type:
          type: string
          description: >-
            Offer type. 'type' or 'shop' fields must be provided. Takes
            precedence over 'shop' field. Note: if type = 'advertisement' then
            either 'quantity' or 'soldQuantity' field must be set.
          enum:
            - shop
            - offer
            - advertisement
        unitPrice:
          type: number
        bold:
          type: boolean
        highlight:
          type: boolean
        departmentPage:
          type: boolean
        emphasized:
          type: boolean
        emphasizedHighlightBoldPackage:
          type: boolean
        multiVariant:
          type: boolean
    Publication_modification:
      type: object
      properties:
        action:
          type: string
          description: Action to perform
          enum:
            - ACTIVATE
            - END
        scheduledFor:
          type: string
          format: date-time
          description: >-
            Date and time for scheduling ACTIVATE action, will be ignored for
            another actions
      description: Contains publication's fields to change
    ReturnPoliciesList_ReturnPolicyBasic_:
      type: object
      properties:
        count:
          type: integer
          format: int32
        returnPolicies:
          type: array
          items:
            $ref: '#/components/schemas/ReturnPolicyBasic'
    WarrantiesList_WarrantyBasic_:
      type: object
      properties:
        count:
          type: integer
          format: int32
        warranties:
          type: array
          items:
            $ref: '#/components/schemas/WarrantyBasic'
    Wrapper_type_for_preview_conditions:
      type: object
      properties:
        includeQuotingBundles:
          type: boolean
          example: false
          description: >-
            Include in calculation user's active bundles which allow to publish
            for free offer or use for free promotion options.
        offer:
          $ref: >-
            #/components/schemas/ParametersForPreviewPrice
    Wraps_listing_and_commissions_fees:
      type: object
      required:
        - commissions
        - quotes
      properties:
        commissions:
          type: array
          items:
            $ref: '#/components/schemas/Describes_success_commission_fee'
        quotes:
          type: array
          items:
            $ref: '#/components/schemas/Describes_listing_fee'
    VariantSet:
      type: object
      required:
        - offers
        - name
        - parameters
      properties:
        offers:
          type: array
          items:
            $ref: '#/components/schemas/VariantSet_Offer'
        name:
          type: string
          maxLength: 50
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/VariantSet_Parameter'
      example:
        name: 't-shirt'
        offers:
          - id: '2'
            colorPattern: red
          - id: '3'
            colorPattern: red
          - id: '4'
            colorPattern: blue
          - id: '5'
            colorPattern: blue
        parameters:
          - 'color/pattern'
          - '21'
    VariantSet_Offer:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        colorPattern:
          type: string
          maxLength: 50
          description: >-
            Label that allows to group variants via image. All variants having the same image should have identical identifier in this field.
    VariantSet_Parameter:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    VariantSets:
      type: object
      properties:
        count:
          type: integer
          description: Total number of variant sets matching the query.
        offerVariants:
          type: array
          items:
            $ref: '#/components/schemas/VariantSets_VariantSet'
      example:
        count: 10
        offerVariants:
          - id: 459fd49f-461f-4230-b22a-daff449b8548
            name: t-shirts
          - id: 70e6effe-7ae6-45f6-8566-80867f466d0a
            name: shoes
    VariantSets_VariantSet:
      type: object
      properties:
        id:
          type: string
          description: Variant set id.
        name:
          type: string
          description: Variant set name.
    ListingOffer:
      type: object
      properties:
        id:
          type: string
          description: The offer ID.
          example: "2865624934"
        name:
          type: string
          description: The title of the offer.
          example: Buty damskie adidas
        seller:
          $ref: '#/components/schemas/OfferSeller'
        promotion:
          $ref: '#/components/schemas/OfferPromotion'
        delivery:
          $ref: '#/components/schemas/OfferDelivery'
        images:
          type: array
          description: >-
            The gallery of images. Only the URL of the original sized image is provided.
            The first image represents the thumbnail image used on listing.
          items:
            $ref: '#/components/schemas/OfferImages'
        sellingMode:
          $ref: '#/components/schemas/OfferSellingMode'
        stock:
          $ref: '#/components/schemas/OfferStock'
        vendor:
          $ref: '#/components/schemas/OfferVendor'
        category:
          $ref: '#/components/schemas/OfferCategory'
        publication:
          $ref: '#/components/schemas/OfferPublication'
    ListingCategoryWithCount:
      type: object
      properties:
        id:
          type: string
          description: The category ID.
          example: "257929"
        name:
          type: string
          description: The category name.
          example: Sportowe
        count:
          type: integer
          example: 123
          description: Results count in this category.
    ListingCategory:
      type: object
      properties:
        id:
          type: string
          description: The Category ID.
          example: "257929"
        name:
          type: string
          description: The category name.
          example: Sportowe
    ListingResponse:
      type: object
      properties:
        items:
          $ref: '#/components/schemas/ListingResponseOffers'
        categories:
          $ref: '#/components/schemas/ListingResponseCategories'
        filters:
          type: array
          description: >-
            An array of filters with counters available for given search. This can be used
            to refine the search results.
          items:
            $ref: '#/components/schemas/ListingResponseFilters'
        searchMeta:
          $ref: '#/components/schemas/ListingResponseSearchMeta'
        sort:
          type: array
          description: Available sorting options.
          items:
            $ref: '#/components/schemas/ListingResponseSort'
    OfferSeller:
      properties:
        id:
          type: string
          description: The seller ID.
          example: "41846511"
        company:
          type: boolean
          description: Indicates whether the seller represents a registered business.
        superSeller:
          type: boolean
          description: Indicates whether the seller has the "Super Sprzedawca" status.
      description: Information about the seller.
    OfferStock:
      properties:
        unit:
          type: string
          enum:
            - UNIT
            - PAIR
            - SET
          description: The unit type of the stock.
        available:
          type: integer
          description: The available stock value.
          example: 23
      description: Information about the stock.
    OfferPromotion:
      properties:
        emphasized:
          type: boolean
          description: Indicates whether the offer is promoted.
        bold:
          type: boolean
          description: Indicates whether the offer has bold title option.
        highlight:
          type: boolean
          description: Indicates whether the offer has highlight option.
      description: Information about promotion options for the item.
    OfferLowestPrice:
      properties:
        amount:
          type: string
          description: The amount provided in a string format to avoid rounding errors.
          example: '123.45'
        currency:
          type: string
          format: ISO 4217
          description: The currency provided as a 3-letter code from ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
          example: 'PLN'
      description: >-
        The lowest shipping cost available. Lack of this entity means that the offer has no
        shipping options (i.e. it is an advertisement or an offer with electronic delivery
        only).
    OfferPrice:
      properties:
        amount:
          type: string
          description: The amount provided in a string format to avoid rounding errors.
          example: '123.45'
        currency:
          type: string
          format: ISO 4217
          description: The currency provided as a 3-letter code from ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
          example: 'PLN'
      description: >-
        The price of the offer. It is the buy now price for *BUY_NOW* selling format and
        current auction price for *AUCTION* format.
    OfferFixedPrice:
      properties:
        amount:
          type: string
          description: The amount provided in a string format to avoid rounding errors.
          example: '123.45'
        currency:
          type: string
          format: ISO 4217
          description: The currency provided as a 3-letter code from ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
          example: 'PLN'
      description: >-
        Fixed (buy now) price of the offer in case of *AUCTION* selling format
        with buy now option enabled.
    OfferDelivery:
      properties:
        availableForFree:
          type: boolean
          description: Indicates whether the offer has free shipping option.
        lowestPrice:
          $ref: '#/components/schemas/OfferLowestPrice'
      description: Information about shipping options for the offer.
    OfferImages:
      properties:
        url:
          type: string
          description: The URL of the original sized image.
          example: https://a.allegroimg.com/original/0129e7/f15ce8924166850eec3fb82bcd5s/BUTY-ADIDAS-DAMSKIE
    OfferSellingMode:
      properties:
        format:
          $ref: '#/components/schemas/SellingModeFormat'
        price:
          $ref: '#/components/schemas/OfferPrice'
        fixedPrice:
          $ref: '#/components/schemas/OfferFixedPrice'
        popularity:
          type: integer
          description: Popularity of the offer for *BUY_NOW* selling format.
          example: 38
        bidCount:
          type: integer
          description: Number of bidders for *AUCTION* selling format.
          example: 12
      description: This section describes the selling format and prices.
    OfferCategory:
      type: object
      description: The category to which the offer is assigned.
      properties:
        id:
          type: string
          example: "257929"
          description: The category ID.
    OfferVendor:
      properties:
        id:
          type: string
          enum:
            - CHARYTATYWNI_ALLEGRO
          description: Identifier of the external service.
        url:
          type: string
          description: URL to the web page of the offer.
          example: http://charytatywni.allegro.pl/oferta-charytatywna-i1234567
      description: This section is available only for the charity offers.
    OfferPublication:
      properties:
        endingAt:
          type: string
          format: ISO 8601
          description: Publication ending date and time in UTC.
          example: "2019-05-15T18:09:41.000Z"
      description: >-
        This section is available only for offers with a defined end of
        publication.
    ListingResponseOffers:
      properties:
        promoted:
          type: array
          description: List of promoted offers.
          items:
            $ref: '#/components/schemas/ListingOffer'
        regular:
          type: array
          description: List of regular (non-promoted) offers.
          items:
            $ref: '#/components/schemas/ListingOffer'
      description: The lists of search results.
    ListingResponseCategories:
      properties:
        subcategories:
          type: array
          description: >-
            Categories with counters, which can be used to refine search
            results.
          items:
            $ref: '#/components/schemas/ListingCategoryWithCount'
        path:
          type: array
          description: Categories path to the current listing category (breadcrumbs).
          items:
            $ref: '#/components/schemas/ListingCategory'
      description: Information about categories.
    ListingResponseFiltersValues:
      properties:
        name:
          type: string
          description: >-
            Name of the option;
            for NUMERIC parameters - word indicating start or end of range (i.e. *from*, *to*).
          example: raty zero
        value:
          type: string
          description: >-
            Filter value. Should be used as query parameter value in the
            request. This can be:

             - for MULTI and SINGLE parameters - a value identifier (e.g. KUJAWSKO_POMORSKIE option in location.province
             filter),
             - for other types - a value entered by user.
          example: INSTALLMENTS_ZERO
        idSuffix:
          type: string
          description: Suffix used as a second part of query parameter name to be used in the request
            (the first part is the filter ID). Applicable for NUMERIC values only.
          example: .to
        count:
          type: integer
          description: Number of search results matching this filter value.
          example: 123
        selected:
          type: boolean
          description: Indicates whether this filter value was used in the current request.
    ListingResponseFilters:
      properties:
        id:
          type: string
          description: Identifier of the filter. Should be used as query parameter key,
            optionally followed by idSuffix from parameter value (only for NUMERIC filters).
          example: campaign
        type:
          type: string
          enum:
            - MULTI
            - SINGLE
            - NUMERIC
            - NUMERIC_SINGLE
            - TEXT
          description: >-
            The type of the filter:

             - *MULTI* - multiple choice filter,
             - *SINGLE* - single select (dropdown) filter,
             - *NUMERIC* - range of numeric values (search offers with value matching this range),
             - *NUMERIC_SINGLE* - single numeric value (search offers with given value matching the range defined in offer),
             - *TEXT* - filter allowing user to input any text.
        name:
          type: string
          description: Name of the filter.
          example: kampania
        values:
          type: array
          description: Available filter values.
          items:
            $ref: '#/components/schemas/ListingResponseFiltersValues'
        minValue:
          type: number
          description: Minimum valid value for filters of type NUMERIC.
          example: 0
        maxValue:
          type: number
          description: Maximum valid value for filters of type NUMERIC.
          example: 1000
        unit:
          type: string
          description: Unit of the NUMERIC/NUMERIC_SINGLE filter.
          example: "zł"
    ListingResponseSearchMeta:
      properties:
        availableCount:
          type: integer
          description: >-
            The number of results available for navigation. If this number is less
            than total count, the search criteria (categories, filters, etc.) should
            be narrowed down to make all results available.
          example: 6000
        totalCount:
          type: integer
          description: The total number of search results with given parameters.
          example: 319203
        fallback:
          type: boolean
          description: >-
            Indicates whether the search fallback was used. If true, no items
            matching exact given phrase were found and related items are
            presented.
      description: Search metadata.
    ListingResponseSort:
      properties:
        value:
          type: string
          description: The query parameter value which should be used for this sorting option.
          example: -relevance
        name:
          type: string
          description: The sorting option name in Polish.
          example: trafność
        order:
          type: string
          description: The order label in Polish specifying ascending or descending mode.
          example: największa
        selected:
          type: boolean
          description: Indicates whether this sorting option was used in the current request.
      description: Available sort options.
    OfferAdditionalServices:
      type: object
      description: The definition of the additional services assigned to the offer.
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the additional services definition.
          example: 09f0b4cc-7880-11e9-8f9e-2a86e4085a59
    OffersSearchResultDto:
      type: object
      properties:
        offers:
          type: array
          description: The list of seller's offers matching the request's criteria.
          items:
            $ref: '#/components/schemas/OfferListingDto'
        count:
          type: integer
          description: Number of offers in the search result.
          example: 1
        totalCount:
          type: integer
          description: The total number of offers matching the request's criteria.
          example: 1234
    OfferListingDto:
      type: object
      description: An offer.
      properties:
        id:
          type: string
          description: The offer ID.
          example: "2865624934"
        name:
          type: string
          description: The title of the offer.
          example: Buty damskie adidas
        category:
          $ref: '#/components/schemas/OfferCategory'
        primaryImage:
          $ref: '#/components/schemas/OfferListingDto.Image'
        sellingMode:
          $ref: '#/components/schemas/OfferListingDtoV1.SellingMode'
        saleInfo:
          $ref: '#/components/schemas/OfferListingDtoV1.SaleInfo'
        stock:
          $ref: '#/components/schemas/OfferListingDtoV1.Stock'
        stats:
          $ref: '#/components/schemas/OfferListingDtoV1.Stats'
        publication:
          $ref: '#/components/schemas/OfferListingDtoV1.Publication'
        afterSalesServices:
          $ref: '#/components/schemas/AfterSalesServices'
        additionalServices:
          $ref: '#/components/schemas/OfferAdditionalServices'
        external:
          $ref: '#/components/schemas/ExternalId'
    OfferListingDto.Image:
      type: object
      description: The image used as a thumbnail on the listings.
      properties:
        url:
          type: string
          description: The url to the image in its original size.
          example: https://a.allegroimg.com/original/05a2af/929c6dae4fb8721a8539582eb421
    OfferListingDtoV1.SellingMode:
      type: object
      description: Information on the offer's selling mode.
      properties:
        format:
          $ref: '#/components/schemas/SellingModeFormat'
        price:
          $ref: '#/components/schemas/BuyNowPrice'
        minimalPrice:
          $ref: '#/components/schemas/MinimalPrice'
        startingPrice:
          $ref: '#/components/schemas/StartingPrice'
    BuyNowPrice:
      allOf:
        - $ref: '#/components/schemas/Price'
      description: The buy now or advertisement price (depending on the offer's format).
    MinimalPrice:
      allOf:
        - $ref: '#/components/schemas/Price'
      description: The minimal price for offers in auction format.
    StartingPrice:
      allOf:
        - $ref: '#/components/schemas/Price'
      description: The starting price for offers in auction format.
    CurrentPrice:
      allOf:
      - $ref: '#/components/schemas/Price'
      description: The current highest bid in auction format.
    SellingModeFormat:
      type: string
      description: The selling format of the offer.
      enum:
        - 'BUY_NOW'
        - 'AUCTION'
        - 'ADVERTISEMENT'
    OfferListingDtoV1.SaleInfo:
      type: object
      description: Additional information about offers in auction format.
      properties:
        currentPrice:
          $ref: '#/components/schemas/CurrentPrice'
        biddersCount:
          type: integer
          description: The number of bidders.
          example: 4
    OfferListingDtoV1.Stock:
      type: object
      description: Information on the offer's stock.
      properties:
        available:
          type: integer
          description: The available stock value.
          example: 23
        sold:
          type: integer
          description: The number of sold items in the last 30 days.
          example: 3
    OfferListingDtoV1.Stats:
      type: object
      description: The offer's statistics.
      properties:
        watchersCount:
          type: integer
          description: The number of users who added this offer to their watch lists.
          example: 99
        visitsCount:
          type: integer
          description: The number of unique users viewing this offer in the past 30 days.
    OfferListingDtoV1.Publication:
      type: object
      description: Information on the offer's publication status and dates.
      properties:
        status:
          $ref: '#/components/schemas/OfferStatus'
        startingAt:
          type: string
          description: The date and time of activation in UTC for a planned listing.
          format: ISO 8601
          example: 2019-05-29T12:00:00Z
        startedAt:
          type: string
          format: ISO 8601
          description: The actual date and time of activation in UTC.
          example: 2019-05-29T12:00:00Z
        endingAt:
          type: string
          format: ISO 6801
          description: The date and time of a planned ending in UTC.
          example: 2019-06-30T12:00:00Z
        endedAt:
          type: string
          format: ISO 8601
          description: The actual date and time of last ending in UTC.
          example: 2019-06-30T12:10:00Z
    OfferStatus:
      type: string
      description: >-
        The publication status of the current offer. The possible values:

          - *INACTIVE* - a draft offer
          - *ACTIVATING* - the offer is planned for listing or is during the process of activation
          - *ACTIVE* - the offer is active
          - *ENDED* - the offer was active and is now ended (for whatever reason)
      enum:
        - 'INACTIVE'
        - 'ACTIVATING'
        - 'ACTIVE'
        - 'ENDED'
    OrderEventsList:
      type: object
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/OrderEvent'
      description: Order events list
    OrderEvent:
      type: object
      required:
        - id
        - order
        - type
        - occurredAt
      properties:
        id:
          type: string
          description: event id
        order:
          $ref: '#/components/schemas/OrderEventData'
        type:
          $ref: '#/components/schemas/CheckoutFormStatus'
        occurredAt:
          type: string
          format: date-time
          example: '2018-10-12T10:12:32.321Z'
          description: 'Date when the event occurred'
      description: Order event
    OrderEventData:
      type: object
      required:
        - buyer
        - lineItems
        - seller
      properties:
        seller:
          $ref: '#/components/schemas/SellerReference'
        buyer:
          $ref: '#/components/schemas/BuyerReference'
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderLineItem'
        checkoutForm:
          $ref: '#/components/schemas/CheckoutFormReference'
      description: Order event data
    SellerReference:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: "437848322"
      description: Seller identifier
    OfferReference:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: "3213213"
        name:
          type: string
          description: 'Offer name'
          example: "Name of purchased offer"
        external:
          $ref: '#/components/schemas/ExternalId'
      description: Offer identifier
    BuyerReference:
      type: object
      required:
        - email
        - login
        - guest
        - id
      properties:
        id:
          type: string
          description: buyer id
          example: "23123123"
        email:
          type: string
          example: "user-email@allegro.pl"
        login:
          type: string
          example: "User_Login"
        guest:
          type: boolean
          description: is a guest account?
          example: false
      description: Buyer data
    OrderLineItem:
      type: object
      required:
        - offer
        - price
        - id
        - quantity
      properties:
        id:
          type: string
          format: uuid
          description: Order item identifier
          example: "62ae358b-8f65-4fc4-9c77-bedf604a2e2b"
        offer:
          $ref: '#/components/schemas/OfferReference'
        quantity:
          type: number
          format: integer
          description: quantity
          example: 1
        originalPrice:
          $ref: '#/components/schemas/Price'
        price:
          $ref: '#/components/schemas/Price'
        boughtAt:
          type: string
          format: date-time
          description: ISO date when offer was bought
          example: "2018-01-01T10:23:43.123Z"
      description: Order item
    OrderEventStats:
      type: object
      properties:
        latestEvent:
          $ref: '#/components/schemas/LatestOrderEvent'
          description: Latest event
      description: Event statistics, currently contains only basic information about the latest event.
    LatestOrderEvent:
      type: object
      required:
        - id
        - occurredAt
      properties:
        id:
          type: string
          description: event id
        occurredAt:
          type: string
          format: date-time
          example: '2018-10-12T10:12:32.321Z'
          description: 'Date when the event occurred'
      description: Basic information about the latest order event.
    CheckoutFormReference:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: "88ae369b-8f65-4fc4-9c77-bedf604a2e2b"
      description: Checkout form identifier
    CheckoutFormStatus:
      enum:
        - BOUGHT
        - FILLED_IN
        - READY_FOR_PROCESSING
      example: "READY_FOR_PROCESSING"
      description: >
        Describes status of the form delivery and purchase options based on payment and purchase status.
        * `BOUGHT` - purchase without checkout form filled in
        * `FILLED_IN` - checkout form filled in but payment is not completed yet so data could still change
        * `READY_FOR_PROCESSING` - payment completed. Purchase is ready for processing.
    CheckoutForms:
      type: object
      required:
        - count
        - totalCount
        - checkoutForms
      properties:
        checkoutForms:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutForm'
        count:
          type: number
          format: integer
          description: number of returned objects
          example: 1
        totalCount:
          type: number
          format: integer
          description: >
            Number of all objects of requested status(es) available (regardless of the provided limit and offset)
          example: 1
    CheckoutForm:
      type: object
      required:
        - id
        - buyer
        - status
        - lineItems
        - surcharges
        - discounts
        - summary
      properties:
        id:
          type: string
          format: uuid
          description: Checkout form id
          example: "29738e61-7f6a-11e8-ac45-09db60ede9d6"
        messageToSeller:
          type: string
          description: Message from buyer to seller
          example: "Please send me an item in red color"
        buyer:
          $ref: '#/components/schemas/CheckoutFormBuyerReference'
        payment:
          $ref: '#/components/schemas/CheckoutFormPaymentReference'
        status:
          $ref: '#/components/schemas/CheckoutFormStatus'
        delivery:
          $ref: '#/components/schemas/CheckoutFormDeliveryReference'
        invoice:
          $ref: '#/components/schemas/CheckoutFormInvoiceInfo'
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutFormLineItem'
        surcharges:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutFormPaymentReference'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutFormDiscount'
        summary:
          $ref: '#/components/schemas/CheckoutFormSummary'
    CheckoutFormBuyerReference:
      type: object
      required:
        - email
        - login
        - guest
        - id
      properties:
        id:
          type: string
          description: buyer id
          example: "23123123"
        email:
          type: string
          example: "user-email@allegro.pl"
        login:
          type: string
          example: "User_Login"
        guest:
          type: boolean
          description: is a guest account?
          example: false
        personalIdentity:
          type: string
          description: Buyer's personal identity number (PESEL)
          example: "67062589524"
        phoneNumber:
          type: string
          description: Phone number
          example: "+48999999999"
      description: Buyer data
    CheckoutFormPaymentReference:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          format: uuid
          description: Payment id
          example: "0f8f1d13-7e9e-11e8-9b00-c5b0dfb78ea6"
        type:
          $ref: '#/components/schemas/CheckoutFormPaymentType'
        provider:
          $ref: '#/components/schemas/CheckoutFormPaymentProvider'
        finishedAt:
          type: string
          format: date-time
          example: '2018-10-12T10:12:32.321'
          description: 'Date when the event occurred'
        paidAmount:
          $ref: '#/components/schemas/Price'
    CheckoutFormPaymentType:
      description: Payment type
      type: string
      enum:
        - CASH_ON_DELIVERY
        - WIRE_TRANSFER
        - ONLINE
    CheckoutFormPaymentProvider:
      description: Payment provider
      type: string
      enum:
        - P24
        - PAYU
    CheckoutFormDeliveryReference:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/CheckoutFormDeliveryAddress'
        method:
          $ref: '#/components/schemas/CheckoutFormDeliveryMethod'
        pickupPoint:
          $ref: '#/components/schemas/CheckoutFormDeliveryPickupPoint'
        cost:
          $ref: '#/components/schemas/Price'
        smart:
          type: boolean
          description: Buyer used a SMART option
          example: true
    CheckoutFormDeliveryAddress:
      type: object
      required:
        - firstName
        - lastName
        - street
        - city
        - zipCode
        - countryCode
      properties:
        firstName:
          type: string
          description: Receiver's first name
          example: "Jan"
        lastName:
          type: string
          description: Receiver's last name
          example: "Kowalski"
        street:
          type: string
          description: Street name
          example: "Grunwaldzka 182"
        city:
          type: string
          description: City name
          example: "Poznań"
        zipCode:
          type: string
          description: Postal code
          example: "60-166"
        countryCode:
          type: string
          description: Country code
          example: "PL"
        companyName:
          type: string
          description: Company name
          example: "Allegro.pl sp. z o.o."
        phoneNumber:
          type: string
          description: Phone number
          example: "+48999999999"
    CheckoutFormDeliveryMethod:
      type: object
      properties:
        id:
          type: string
          description: Delivery method id
          example: "1fa56f79-4b6a-4821-a6f2-ca9c16d5c925"
        name:
          type: string
          description: Delivery method name
          example: "Allegro Paczkomaty InPost"
    CheckoutFormDeliveryPickupPoint:
      type: object
      properties:
        id:
          type: string
          description: Delivery point id
          example: "POZ08A"
        name:
          type: string
          description: Delivery point name
          example: "Paczkomat POZ08A"
        description:
          type: string
          description: Delivery point description
          example: "Stacja paliw BP"
        address:
          $ref: '#/components/schemas/CheckoutFormDeliveryPickupPointAddress'
    CheckoutFormDeliveryPickupPointAddress:
      type: object
      properties:
        street:
          type: string
          description: Delivery point street name
          example: "Grunwaldzka 108"
        zipCode:
          type: string
          description: Delivery point postal code
          example: "60-166"
        city:
          type: string
          description: City name
          example: "Poznań"
    CheckoutFormInvoiceInfo:
      type: object
      required:
        - required
      properties:
        required:
          type: boolean
          description: Is invoice required by buyer?
          example: true
        address:
          $ref: '#/components/schemas/CheckoutFormInvoiceAddress'
    CheckoutFormInvoiceAddress:
      type: object
      required:
        - street
        - city
        - zipCode
        - countryCode
      properties:
        street:
          type: string
          description: Street name
          example: "Grunwaldzka 182"
        city:
          type: string
          description: City name
          example: "Poznań"
        zipCode:
          type: string
          description: Postal code
          example: "60-166"
        countryCode:
          type: string
          description: Country code
          example: "PL"
        company:
          $ref: '#/components/schemas/CheckoutFormInvoiceAddressCompany'
        naturalPerson:
          $ref: '#/components/schemas/CheckoutFormInvoiceAddressNaturalPerson'
    CheckoutFormInvoiceAddressCompany:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of a company for which invoice should be issued
        taxId:
          type: string
          description: Tax id
    CheckoutFormInvoiceAddressNaturalPerson:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
          description: Invoice receiver first name
          example: "Jan"
        lastName:
          type: string
          description: Invoice receiver last name
          example: "Kowalski"
    CheckoutFormLineItem:
      type: object
      required:
        - id
        - offer
        - quantity
        - originalPrice
        - price
      properties:
        id:
          type: string
          format: uuid
          description: Line item identifier
          example: "62ae358b-8f65-4fc4-9c77-bedf604a2e2b"
        offer:
          $ref: '#/components/schemas/OfferReference'
        quantity:
          type: number
          format: integer
          description: quantity
          example: 1
        originalPrice:
          $ref: '#/components/schemas/Price'
        price:
          $ref: '#/components/schemas/Price'
        selectedAdditionalServices:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutFormAdditionalService'
        boughtAt:
          type: string
          format: date-time
          description: ISO date when offer was bought
          example: "2018-01-01T10:23:43.123"
      description: Order item
    CheckoutFormAdditionalService:
      type: object
      properties:
        definitionId:
          type: string
          description: Additional service id
        name:
          type: string
          description: Additional service name
        price:
          $ref: '#/components/schemas/Price'
          description: Additional service price
        quantity:
          type: integer
          format: int32
          description: Quantity of an additional service
          example: 1
    CheckoutFormDiscount:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - COUPON
            - BUNDLE
            - MULTIPACK
            - CROSSMULTIPACK
          description: >
            Describes type of discount used in checkout form. The types of discounts can be as follows:
            * `COUPON` - coupon was used during payment
            * `BUNDLE` - some of the line items were bought as a bundle
            * `MULTIPACK` - at least one line item was bought with multipack option
            * `CROSSMULTIPACK` - some of line items each from different offers were bought together as multipack
    CheckoutFormSummary:
      type: object
      required:
        - totalToPay
      properties:
        totalToPay:
          description: Total to pay including additional services and delivery
          $ref: '#/components/schemas/Price'
    DisputeListResponse:
      type: object
      properties:
        disputes:
          type: array
          items:
            $ref: '#/components/schemas/Dispute'
    Dispute:
      type: object
      properties:
        id:
          type: string
          description: Identifier of the dispute
        subject:
          $ref: '#/components/schemas/Subject'
          description: Subject of the dispute
        status:
          type: string
          enum:
            - CLOSED
            - ONGOING
            - UNRESOLVED
        buyer:
          $ref: '#/components/schemas/DisputeUser'
        seller:
          $ref: '#/components/schemas/DisputeUser'
        checkoutForm:
          $ref: '#/components/schemas/DisputeCheckoutForm'
        message:
          $ref: '#/components/schemas/DisputeFirstMessage'
        messagesCount:
          type: integer
          format: int32
      required:
        - id
        - subject
        - status
        - buyer
        - seller
        - checkoutForm
        - message
        - messagesCount
    Subject:
      type: object
      properties:
        name:
          type: string
          description: Subject name
          example: "nie otrzymałem towaru po wpłacie"
    DisputeUser:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
    DisputeMessageList:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/DisputeMessage'
    DisputeFirstMessage:
      type: object
      description: Initial dispute message with text OR attachment OR both
      properties:
        id:
          type: string
        text:
          type: string
        attachment:
          type: object
          $ref: '#/components/schemas/DisputeAttachment'
        author:
          type: object
          $ref: '#/components/schemas/DisputeAuthor'
        createdAt:
          type: string
          format: date-time
          example: "2018-02-10T12:12:12Z"
      required:
        - id
        - author
        - createdAt
    DisputeMessage:
      type: object
      description: Initial dispute message with text OR attachment OR both
      properties:
        id:
          type: string
        text:
          type: string
        attachment:
          type: object
          $ref: '#/components/schemas/DisputeAttachment'
        author:
          type: object
          $ref: '#/components/schemas/DisputeMessageAuthor'
        createdAt:
          type: string
          format: date-time
          example: "2018-02-10T12:12:12Z"
      required:
        - id
        - author
        - createdAt
    DisputeMessageAuthor:
      type: object
      description: Author of the message
      properties:
        login:
          type: string
          description: Not present if role is ADMIN or SYSTEM
        role:
          $ref: '#/components/schemas/MessageAuthorRole'
      required:
        - role
    DisputeAttachment:
      type: object
      properties:
        fileName:
          type: string
          maxLength: 255
        url:
          type: string
          description: Direct link to the attachment
          example: "https://upload.allegro.pl/sale/dispute-attachments/eeed0007-4404-4176-a1eb-11d26f056c0d"
      required:
        - fileName
        - url
    DisputeAttachmentId:
      type: object
      properties:
        id:
          type: string
      required:
        - id
    AttachmentDeclaration:
      type: object
      properties:
        fileName:
          type: string
        size:
          type: integer
      required:
        - fileName
        - size
    DisputeCheckoutForm:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
          example: "2018-02-10T12:12:12Z"
      required:
        - id
        - createdAt
    DisputeAuthor:
      type: object
      properties:
        login:
          type: string
          description: Not present if role is ADMIN
        role:
          $ref: '#/components/schemas/DisputeAuthorRole'
      required:
        - role
    DisputeAuthorRole:
      type: string
      enum:
        - BUYER
        - ADMIN
    MessageAuthorRole:
      type: string
      enum:
        - BUYER
        - SELLER
        - ADMIN
        - SYSTEM
    MessageRequest:
      type: object
      description: "Request body to add message to the dispute. Presence of text or attachment fields or both is required."
      properties:
        text:
          type: string
          maxLength: 20000
        attachment:
          type: object
          $ref: '#/components/schemas/DisputeAttachmentId'
        type:
          type: string
          enum:
            - REGULAR
            - END_REQUEST
      required:
        - text
        - attachment
        - type
    TagRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 25
        hidden:
          type: boolean
    TagId:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    TagResponse:
      type: object
      required:
        - id
        - name
        - hidden
      properties:
        id:
          type: string
        name:
          type: string
        hidden:
          type: boolean
    TagListResponse:
      type: object
      required:
        - tags
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagResponse'
    TagIdsRequest:
      type: object
      required:
        - tags
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagId'
    LineItemIdMappings:
      type: object
      properties:
        mappings:
          type: array
          items:
            type: object
            properties:
              dealId:
                type: string
                description: WebAPI deal id
                example: 12345678
              lineItemId:
                type: string
                format: uuid
                description: Order API line item id
                example: "4e9d1d43-0da5-466e-9c4a-679625b7a617"
            required:
              - dealId
              - lineItemId
    PromotionResponseDto:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    CampaignResponseDto:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    SinglePromotionCampaignResponseDto:
      type: object
      required:
        - campaign
        - promotion
        - status
      properties:
        campaign:
          $ref: '#/components/schemas/CampaignResponseDto'
        promotion:
          $ref: '#/components/schemas/PromotionResponseDto'
        status:
          type: string
          enum:
            - PENDING
            - ACTIVE
            - SUSPENDED
    PromotionCampaignsResponseDto:
      type: object
      required:
        - promotionCampaigns
        - totalCount
      properties:
        promotionCampaigns:
          type: array
          items:
            $ref: '#/components/schemas/SinglePromotionCampaignResponseDto'
        totalCount:
          type: integer
          format: int64
    PromotionCampaignResponseDto:
      type: object
      required:
        - campaign
        - link
        - promotion
        - status
      properties:
        campaign:
          $ref: '#/components/schemas/CampaignResponseDto'
        link:
          type: string
        promotion:
          $ref: '#/components/schemas/PromotionResponseDto'
        status:
          type: string
          enum:
            - REQUESTED
            - SUSPENDED
            - VERIFICATION
            - ACCEPTED
            - ACTIVE
            - FINISHED
            - DECLINED
    CampaignRequestDto:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    PromotionRequestDto:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    PromotionCampaignRequestDto:
      type: object
      required:
        - campaign
        - promotion
      properties:
        promotion:
          $ref: '#/components/schemas/PromotionRequestDto'
        campaign:
          $ref: '#/components/schemas/CampaignRequestDto'
    CheckoutFormAddWaybillRequest:
      type: object
      required:
        - carrierId
        - waybill
        - lineItems
        - lineItem.id
      properties:
        carrierId:
          type: string
          enum:
            - UPS
            - INPOST
            - DHL
            - GLS
            - RUCH
            - POCZTA_POLSKA
            - DPD
            - POCZTEX
            - FEDEX
            - TNT_EXPRESS
            - DB_SCHENKER
            - RABEN
            - GEIS
            - DTS
            - PEKAES
            - PATRON
            - X_PRESS_COURIERS
            - RHENUS_LOGISTICS
            - OTHER
          description: >-
            Carrier identifier taken from the dictionary below. It’s highly recommended to use an identifier different
            from OTHER, because its parcel status may be updated automatically. Carrier identifier OTHER is reserved for
            cases when seller uses a custom carrier or not yet integrated with Allegro.
        waybill:
          type: string
          description: >-
            Waybill number (parcel tracking number).
            Cannot be empty and must be no longer than 64 characters. It can contain any word
            character (equal to [a-zA-Z0-9_]) and special characters: parentheses and hyphen-minus.
          maxLength: 64
        carrierName:
          type: string
          maxLength: 30
          description: >-
            Carrier name to be provided only if carrierId is OTHER, otherwise it’s ignored.
            Must be no longer than 30 characters.
        lineItems:
          type: array
          description: >-
            List of order line items. They must be from the order specified in the path parameter. List cannot be empty.
          items:
            properties:
              id:
                type: string
                description: >-
                  Identifier of an order line item.
    CheckoutFormAddWaybillCreated:
      type: object
      properties:
        id:
          type: string
          description: Identifier of a shipment.
        waybill:
          type: string
          description: >-
            Waybill number (parcel tracking number).
            Cannot be empty and must be no longer than 64 characters. It can contain any word
            character (equal to [a-zA-Z0-9_]) and special characters: parentheses and hyphen-minus.
        carrierId:
          type: string
          enum:
            - UPS
            - INPOST
            - DHL
            - GLS
            - RUCH
            - POCZTA_POLSKA
            - POCZTEX
            - FEDEX
            - DPD
            - TNT_EXPRESS
            - DB_SCHENKER
            - RABEN
            - GEIS
            - DTS
            - PEKAES
            - PATRON
            - X_PRESS_COURIERS
            - RHENUS_LOGISTICS
            - OTHER
          description: >-
            Carrier identifier taken from the dictionary below. It’s highly recommended to use an identifier different
            from OTHER, because its parcel status may be updated automatically. Carrier identifier OTHER is reserved for
            cases when seller uses a custom carrier or not yet integrated with Allegro.
        carrierName:
          type: string
          description: >-
            Carrier name to be provided only if carrierId is OTHER, otherwise it’s ignored.
            Must be no longer than 30 characters.
        lineItems:
          description: >-
            List of order line items. They must be from the order specified in the path parameter. List cannot be empty.
          items:
            properties:
              id:
                type: string
                description: Identifier of an order line item.
        createdAt:
          type:
            string
          description: Date and time of the parcel tracking number registration in UTC (ISO8601 format).
    CheckoutFormOrderWaybillResponse:
      type: object
      properties:
        shipments:
          type: array
          description: >-
            List of parcel tracking numbers currently assigned to the order.
          items:
            $ref: '#/components/schemas/CheckoutFormAddWaybillCreated'
    GetSaleProductsResponse:
      type: object
      required:
        - products
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/SaleProductResponseDto'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/SaleProductResponseCategoriesDto'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/ListingResponseFilters'
        nextPage:
          type: object
          properties:
            id:
              type: string
              description: A "cursor" to the next set of results.
    SaleProductResponseDto:
      type: object
      required:
        - id
        - name
        - category
      properties:
        id:
          type: string
        name:
          type: string
          description: Name of the product.
          maxLength: 50
        category:
          $ref: '#/components/schemas/Category'
        eans:
          type: array
          description: A list of codes that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.
          items:
            type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageUrl'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ProductParameter'
        offerRequirements:
          $ref: '#/components/schemas/OfferRequirements'
        compatibilityList:
          $ref: '#/components/schemas/CompatibilityList'
      description: Product data
    SaleProductResponseCategoriesDto:
      properties:
        subcategories:
          type: array
          description: A list of categories that contain results for given search parameters.
          items:
            $ref: '#/components/schemas/ProductsCategorySubcategories'
        path:
          type: array
          description: The path of current category used as categrory filter in search.
          items:
            $ref: '#/components/schemas/ProductsCategoryPath'
    ProductsCategorySubcategories:
      type: object
      properties:
        id:
          type: string
          description: Category id.
        name:
          type: string
          description: Category name.
        count:
          type: integer
          description: Total number of products matching query criteria in this category
          format: int32
    ProductsCategoryPath:
      type: object
      properties:
        id:
          type: string
          description: Category id.
        name:
          type: string
          description: Category name.
    ProductParameter:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        rangeValue:
          $ref: '#/components/schemas/ParameterRangeValue'
        values:
          type: array
          items:
            type: string
        valuesIds:
          type: array
          items:
            type: string
        valuesLabels:
          type: array
          items:
            type: string
        options:
          type: array
          items:
            type: object
            properties:
              identifiesProduct:
                type: boolean
      description: Product's parameter
    OfferRequirements:
      description: Requirements for creating offer related to this product. For future use.
      properties:
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ProductParameter'
    AdditionalEmailsResponse:
      type: object
      required:
        - additional-emails
      properties:
        additional-emails:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalEmail'
    AdditionalEmail:
      type: object
      description: Details of a single additional email address.
      required:
        - id
        - email
        - createdAt
      properties:
        id:
          type: string
        email:
          type: string
        createdAt:
          type: string
    AdditionalEmailRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          description: >-
            A valid email address you want to add to your account. Maximum length of the part before the `@` sign is
            64 characters.
    ClassifiedPackages:
      type: object
      required:
      - basePackage
      properties:
        basePackage:
          $ref: '#/components/schemas/ClassifiedPackage'
        extraPackages:
          type: array
          items:
            $ref: '#/components/schemas/ClassifiedPackage'
    ClassifiedResponse:
      type: object
      required:
      - basePackage
      - extraPackages
      properties:
        basePackage:
          $ref: '#/components/schemas/ClassifiedPackage'
        extraPackages:
          type: array
          items:
            $ref: '#/components/schemas/ClassifiedPackage'
      title: ClassifiedResponse
    ClassifiedExtension:
      type: object
      properties:
        description:
          type: string
          description: 'The classified extension description.'
          example: 'Autocentrum.pl'
        name:
          type: string
          description: 'The classified extension name.'
          example: 'autocentrumExport'
      title: ClassifiedExtension
    ClassifiedPackageConfig:
      type: object
      required:
      - id
      - name
      - type
      properties:
        extensions:
          type: array
          items:
            $ref: '#/components/schemas/ClassifiedExtension'
        id:
          type: string
          description: 'The classifieds package ID.'
          example: '6174be19-56f9-484b-b72c-43b0b00785e8'
        name:
          type: string
          description: 'The classifieds package name.'
          example: 'Power'
        promotions:
          type: array
          description: 'A list of additional promotions included in the package.'
          items:
            $ref: '#/components/schemas/ClassifiedPromotion'
        publication:
          $ref: '#/components/schemas/ClassifiedPublication'
        type:
          type: string
          enum:
          - BASE
          - EXTRA
      title: ClassifiedPackageConfig
    ClassifiedPackageConfigs:
      type: object
      required:
      - packages
      properties:
        packages:
          type: array
          items:
            $ref: '#/components/schemas/ClassifiedPackageConfig'
      title: ClassifiedPackageConfigs
    ClassifiedPromotion:
      type: object
      required:
      - duration
      - name
      properties:
        duration:
          type: string
          description: 'Duration in ISO 8601 format.'
          example: 'PT240H'
        name:
          type: string
          description: 'Name of the promotion.'
          example: 'emphasized'
      title: ClassifiedPromotion
    ClassifiedPublication:
      type: object
      required:
      - duration
      properties:
        duration:
          type: string
          description: 'Duration in ISO 8601 format.'
          example: 'PT240H'
      title: ClassifiedPublication
